//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProntoMVC.Data.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DemoProntoEntities : DbContext
    {
        public DemoProntoEntities()
            : base("name=DemoProntoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Articulo> Articulos { get; set; }
        public virtual DbSet<ControlCalidad> ControlesCalidads { get; set; }
        public virtual DbSet<DetalleRequerimiento> DetalleRequerimientos { get; set; }
        public virtual DbSet<Obra> Obras { get; set; }
        public virtual DbSet<Requerimiento> Requerimientos { get; set; }
        public virtual DbSet<Sector> Sectores { get; set; }
        public virtual DbSet<Unidad> Unidades { get; set; }
        public virtual DbSet<Parametros> Parametros { get; set; }
        public virtual DbSet<Parametros2> Parametros2 { get; set; }
        public virtual DbSet<Vendedor> Vendedores { get; set; }
        public virtual DbSet<Cliente> Clientes { get; set; }
        public virtual DbSet<PuntosVenta> PuntosVentas { get; set; }
        public virtual DbSet<Condiciones_Compra> Condiciones_Compras { get; set; }
        public virtual DbSet<Ganancia> Ganancias { get; set; }
        public virtual DbSet<IGCondicion> IGCondiciones { get; set; }
        public virtual DbSet<ListasPrecio> ListasPrecios { get; set; }
        public virtual DbSet<TiposRetencionGanancia> TiposRetencionGanancias { get; set; }
        public virtual DbSet<Concepto> Conceptos { get; set; }
        public virtual DbSet<Cuenta> Cuentas { get; set; }
        public virtual DbSet<DetallePedido> DetallePedidos { get; set; }
        public virtual DbSet<DetallePresupuesto> DetallePresupuestos { get; set; }
        public virtual DbSet<Pedido> Pedidos { get; set; }
        public virtual DbSet<Presupuesto> Presupuestos { get; set; }
        public virtual DbSet<IBCondicion> IBCondiciones { get; set; }
        public virtual DbSet<Localidad> Localidades { get; set; }
        public virtual DbSet<Moneda> Monedas { get; set; }
        public virtual DbSet<Pais> Paises { get; set; }
        public virtual DbSet<Provincia> Provincias { get; set; }
        public virtual DbSet<TiposComprobante> TiposComprobantes { get; set; }
        public virtual DbSet<DetalleFactura> DetalleFacturas { get; set; }
        public virtual DbSet<Factura> Facturas { get; set; }
        public virtual DbSet<DetalleProveedor> DetalleProveedoresContactos { get; set; }
        public virtual DbSet<DetalleProveedoresIB> DetalleProveedoresIBs { get; set; }
        public virtual DbSet<DetalleProveedoresRubro> DetalleProveedoresRubros { get; set; }
        public virtual DbSet<PlazosEntrega> PlazosEntregas { get; set; }
        public virtual DbSet<Proveedor> Proveedores { get; set; }
        public virtual DbSet<Rubro> Rubros { get; set; }
        public virtual DbSet<DetalleCliente> DetalleClientesContactos { get; set; }
        public virtual DbSet<DetalleClientesLugaresEntrega> DetalleClientesLugaresEntregas { get; set; }
        public virtual DbSet<BancoChequera> BancoChequeras { get; set; }
        public virtual DbSet<Banco> Bancos { get; set; }
        public virtual DbSet<TarjetasCredito> TarjetasCreditoes { get; set; }
        public virtual DbSet<Estados_Proveedore> Estados_Proveedores { get; set; }
        public virtual DbSet<Cotizacione> Cotizaciones { get; set; }
        public virtual DbSet<CuentasCorrientesAcreedor> CuentasCorrientesAcreedores { get; set; }
        public virtual DbSet<CuentasCorrientesDeudor> CuentasCorrientesDeudores { get; set; }
        public virtual DbSet<CuentasEjerciciosContable> CuentasEjerciciosContables { get; set; }
        public virtual DbSet<CuentasGasto> CuentasGastos { get; set; }
        public virtual DbSet<DetalleCuenta> DetalleCuentas { get; set; }
        public virtual DbSet<DetalleOrdenesCompra> DetalleOrdenesCompras { get; set; }
        public virtual DbSet<DetalleRemito> DetalleRemitos { get; set; }
        public virtual DbSet<OrdenesCompra> OrdenesCompras { get; set; }
        public virtual DbSet<Remito> Remitos { get; set; }
        public virtual DbSet<DetalleFacturasClientesPRESTO> DetalleFacturasClientesPRESTOes { get; set; }
        public virtual DbSet<DetalleFacturasOrdenesCompra> DetalleFacturasOrdenesCompras { get; set; }
        public virtual DbSet<DetalleFacturasProvincia> DetalleFacturasProvincias { get; set; }
        public virtual DbSet<DetalleFacturasRemito> DetalleFacturasRemitos { get; set; }
        public virtual DbSet<DetalleArticulosActivosFijo> DetalleArticulosActivosFijos { get; set; }
        public virtual DbSet<DetalleArticulosDocumento> DetalleArticulosDocumentos { get; set; }
        public virtual DbSet<DetalleArticulosImagene> DetalleArticulosImagenes { get; set; }
        public virtual DbSet<DetalleArticulosUnidade> DetalleArticulosUnidades { get; set; }
        public virtual DbSet<DefinicionArticulo> DefinicionArticulos { get; set; }
        public virtual DbSet<Deposito> Depositos { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<Ubicacion> Ubicaciones { get; set; }
        public virtual DbSet<EmpleadosAcceso> EmpleadosAccesos { get; set; }
        public virtual DbSet<DetalleRecibo> DetalleRecibos { get; set; }
        public virtual DbSet<DetalleRecibosCuenta> DetalleRecibosCuentas { get; set; }
        public virtual DbSet<DetalleRecibosRubrosContable> DetalleRecibosRubrosContables { get; set; }
        public virtual DbSet<DetalleRecibosValore> DetalleRecibosValores { get; set; }
        public virtual DbSet<Recibo> Recibos { get; set; }
        public virtual DbSet<RubrosContable> RubrosContables { get; set; }
        public virtual DbSet<RubrosValore> RubrosValores { get; set; }
        public virtual DbSet<Comparativa> Comparativas { get; set; }
        public virtual DbSet<DetalleComparativa> DetalleComparativas { get; set; }
        public virtual DbSet<Autorizacione> Autorizaciones { get; set; }
        public virtual DbSet<AutorizacionesCompra> AutorizacionesCompras { get; set; }
        public virtual DbSet<AutorizacionesPorComprobante1> AutorizacionesPorComprobante1 { get; set; }
        public virtual DbSet<AutorizacionesPorComprobanteADesignar> AutorizacionesPorComprobanteADesignars { get; set; }
        public virtual DbSet<DetalleAutorizacione> DetalleAutorizaciones { get; set; }
        public virtual DbSet<DetalleAutorizacionesCompra> DetalleAutorizacionesCompras { get; set; }
        public virtual DbSet<DetalleAutorizacionesFirmante> DetalleAutorizacionesFirmantes { get; set; }
        public virtual DbSet<ProntoIni> ProntoIni { get; set; }
        public virtual DbSet<ProntoIniClaves> ProntoIniClaves { get; set; }
        public virtual DbSet<DetalleOrdenesPago> DetalleOrdenesPagoes { get; set; }
        public virtual DbSet<DetalleOrdenesPagoCuenta> DetalleOrdenesPagoCuentas { get; set; }
        public virtual DbSet<DetalleOrdenesPagoRendicionesFF> DetalleOrdenesPagoRendicionesFFs { get; set; }
        public virtual DbSet<DetalleOrdenesPagoRubrosContable> DetalleOrdenesPagoRubrosContables { get; set; }
        public virtual DbSet<DetalleOrdenesPagoValore> DetalleOrdenesPagoValores { get; set; }
        public virtual DbSet<OrdenPago> OrdenesPago { get; set; }
        public virtual DbSet<ComprobanteProveedor> ComprobantesProveedor { get; set; }
        public virtual DbSet<DetalleComprobantesProveedore> DetalleComprobantesProveedores { get; set; }
        public virtual DbSet<DetalleComprobantesProveedoresPresupuestosObra> DetalleComprobantesProveedoresPresupuestosObras { get; set; }
        public virtual DbSet<DetalleComprobantesProveedoresProvincia> DetalleComprobantesProveedoresProvincias { get; set; }
        public virtual DbSet<Caja> Cajas { get; set; }
        public virtual DbSet<DetalleEmpleadosCuentasBancaria> DetalleEmpleadosCuentasBancarias { get; set; }
        public virtual DbSet<DetalleEmpleadosJornada> DetalleEmpleadosJornadas { get; set; }
        public virtual DbSet<DetalleEmpleadosSectore> DetalleEmpleadosSectores { get; set; }
        public virtual DbSet<DetalleNotasCredito> DetalleNotasCreditoes { get; set; }
        public virtual DbSet<DetalleNotasCreditoImputacione> DetalleNotasCreditoImputaciones { get; set; }
        public virtual DbSet<DetalleNotasCreditoOrdenesCompra> DetalleNotasCreditoOrdenesCompras { get; set; }
        public virtual DbSet<DetalleNotasCreditoProvincia> DetalleNotasCreditoProvincias { get; set; }
        public virtual DbSet<DetalleNotasDebito> DetalleNotasDebitoes { get; set; }
        public virtual DbSet<DetalleNotasDebitoProvincia> DetalleNotasDebitoProvincias { get; set; }
        public virtual DbSet<Ejercicio> Ejercicios { get; set; }
        public virtual DbSet<EjerciciosContable> EjerciciosContables { get; set; }
        public virtual DbSet<EjerciciosPeriodo> EjerciciosPeriodos { get; set; }
        public virtual DbSet<Empresa> Empresas { get; set; }
        public virtual DbSet<Formulario> Formularios { get; set; }
        public virtual DbSet<NotasCredito> NotasCreditoes { get; set; }
        public virtual DbSet<NotasDebito> NotasDebitoes { get; set; }
        public virtual DbSet<TiposValore> TiposValores { get; set; }
        public virtual DbSet<TiposCuenta> TiposCuentas { get; set; }
        public virtual DbSet<TiposCuentaGrupos> TiposCuentaGrupos { get; set; }
        public virtual DbSet<Titulo> Titulos { get; set; }
        public virtual DbSet<DescripcionIva> DescripcionIvas { get; set; }
        public virtual DbSet<Subrubro> Subrubros { get; set; }
        public virtual DbSet<DetalleOrdenesPagoImpuesto> DetalleOrdenesPagoImpuestos { get; set; }
        public virtual DbSet<Subdiario> Subdiarios { get; set; }
        public virtual DbSet<ListasPreciosDetalle> ListasPreciosDetalles { get; set; }
        public virtual DbSet<C_TempAutorizaciones> C_TempAutorizaciones { get; set; }
        public virtual DbSet<Transportista> Transportistas { get; set; }
        public virtual DbSet<DetalleEmpleadosObra> DetalleEmpleadosObras { get; set; }
        public virtual DbSet<DetalleEmpleadosUbicacione> DetalleEmpleadosUbicaciones { get; set; }
        public virtual DbSet<Cargo> Cargos { get; set; }
        public virtual DbSet<CuentasBancaria> CuentasBancarias { get; set; }
        public virtual DbSet<DetalleEmpleadosIngresoEgreso> DetalleEmpleadosIngresosEgresos { get; set; }
        public virtual DbSet<Empleado> Empleados { get; set; }
        public virtual DbSet<Valore> Valores { get; set; }
        public virtual DbSet<CurvasTalle> CurvasTalles { get; set; }
        public virtual DbSet<ImpuestosDirecto> ImpuestosDirectos { get; set; }
        public virtual DbSet<Marca> Marcas { get; set; }
        public virtual DbSet<Materiale> Materiales { get; set; }
        public virtual DbSet<Modelo> Modelos { get; set; }
        public virtual DbSet<Actividades_Proveedore> Actividades_Proveedores { get; set; }
        public virtual DbSet<DiferenciasCambio> DiferenciasCambios { get; set; }
        public virtual DbSet<Asiento> Asientos { get; set; }
        public virtual DbSet<DetalleAsiento> DetalleAsientos { get; set; }
        public virtual DbSet<Conciliacione> Conciliaciones { get; set; }
        public virtual DbSet<DetalleConciliacione> DetalleConciliacionesContables { get; set; }
        public virtual DbSet<DetalleConciliacionesNoContable> DetalleConciliacionesNoContables { get; set; }
        public virtual DbSet<Tree> Trees { get; set; }
        public virtual DbSet<TiposImpuesto> TiposImpuestoes { get; set; }
        public virtual DbSet<Regione> Regiones { get; set; }
        public virtual DbSet<DetalleClientesDireccione> DetalleClientesDirecciones { get; set; }
        public virtual DbSet<DetalleClientesTelefono> DetalleClientesTelefonos { get; set; }
        public virtual DbSet<Calle> Calles { get; set; }
        public virtual DbSet<Feriado> Feriados { get; set; }
        public virtual DbSet<TiposCompra> TiposCompras { get; set; }
        public virtual DbSet<TiposNegociosVenta> TiposNegociosVentas { get; set; }
        public virtual DbSet<TiposOperacione> TiposOperaciones { get; set; }
        public virtual DbSet<TiposOperacionesGrupos> TiposOperacionesGrupos { get; set; }
        public virtual DbSet<GruposObra> GruposObras { get; set; }
        public virtual DbSet<UnidadesOperativa> UnidadesOperativas { get; set; }
        public virtual DbSet<Colore> Colores { get; set; }
        public virtual DbSet<DetalleObrasEquiposInstalado> DetalleObrasEquiposInstalados { get; set; }
        public virtual DbSet<DetalleObrasEquiposInstalados2> DetalleObrasEquiposInstalados2 { get; set; }
        public virtual DbSet<DetalleObrasPoliza> DetalleObrasPolizas { get; set; }
        public virtual DbSet<TiposPoliza> TiposPolizas { get; set; }
        public virtual DbSet<DetalleDevolucione> DetalleDevoluciones { get; set; }
        public virtual DbSet<Devolucione> Devoluciones { get; set; }
        public virtual DbSet<Chofere> Choferes { get; set; }
        public virtual DbSet<LogComprobantesElectronico> LogComprobantesElectronicos { get; set; }
        public virtual DbSet<PlazosFijo> PlazosFijos { get; set; }
        public virtual DbSet<Conjunto> Conjuntos { get; set; }
        public virtual DbSet<DetalleConjunto> DetalleConjuntos { get; set; }
        public virtual DbSet<Tipos> Tipos { get; set; }
        public virtual DbSet<AjustesStock> AjustesStocks { get; set; }
        public virtual DbSet<DetalleAjustesStock> DetalleAjustesStocks { get; set; }
        public virtual DbSet<DetalleOtrosIngresosAlmacen> DetalleOtrosIngresosAlmacens { get; set; }
        public virtual DbSet<DetalleRecepcione> DetalleRecepciones { get; set; }
        public virtual DbSet<DetalleSalidasMateriale> DetalleSalidasMateriales { get; set; }
        public virtual DbSet<OtrosIngresosAlmacen> OtrosIngresosAlmacens { get; set; }
        public virtual DbSet<Recepcione> Recepciones { get; set; }
        public virtual DbSet<SalidasMateriale> SalidasMateriales { get; set; }
        public virtual DbSet<DetalleValesSalida> DetalleValesSalidas { get; set; }
        public virtual DbSet<ValesSalida> ValesSalidas { get; set; }
        public virtual DbSet<TarifasFlete> TarifasFletes { get; set; }
        public virtual DbSet<OrdenesTrabajo> OrdenesTrabajoes { get; set; }
        public virtual DbSet<PresupuestoObrasNodo> PresupuestoObrasNodos { get; set; }
        public virtual DbSet<PresupuestoObrasNodosConsumo> PresupuestoObrasNodosConsumos { get; set; }
        public virtual DbSet<PresupuestoObrasNodosDato> PresupuestoObrasNodosDatos { get; set; }
        public virtual DbSet<PresupuestoObrasNodosPxQxPresupuesto> PresupuestoObrasNodosPxQxPresupuestoes { get; set; }
        public virtual DbSet<PresupuestoObrasNodosPxQxPresupuestoPorDia> PresupuestoObrasNodosPxQxPresupuestoPorDias { get; set; }
        public virtual DbSet<PresupuestoObrasRedeterminacione> PresupuestoObrasRedeterminaciones { get; set; }
        public virtual DbSet<TiposRubrosFinancierosGrupos> TiposRubrosFinancierosGrupos { get; set; }
        public virtual DbSet<Acopio> Acopios { get; set; }
        public virtual DbSet<DetalleAcopio> DetalleAcopios { get; set; }
        public virtual DbSet<DetalleLMateriale> DetalleLMateriales { get; set; }
        public virtual DbSet<LMateriale> LMateriales { get; set; }
        public virtual DbSet<CentrosCosto> CentrosCostoes { get; set; }
        public virtual DbSet<CartasDePorteDetalle_EF> CartasDePorteDetalle_EF { get; set; }
        public virtual DbSet<CartasDePorteReglasDeFacturacion> CartasDePorteReglasDeFacturacions { get; set; }
        public virtual DbSet<CartasPorteAcopio> CartasPorteAcopios { get; set; }
        public virtual DbSet<CartasDePorteHistorico> CartasDePorteHistoricoes { get; set; }
        public virtual DbSet<CartasPorteMovimiento> CartasPorteMovimientos { get; set; }
        public virtual DbSet<FertilizantesCupos> FertilizantesCupos { get; set; }
        public virtual DbSet<DepositosBancario> DepositosBancarios { get; set; }
        public virtual DbSet<DetalleDepositosBancario> DetalleDepositosBancarios { get; set; }
        public virtual DbSet<DetalleValoresCuenta> DetalleValoresCuentas { get; set; }
        public virtual DbSet<DetalleValoresProvincia> DetalleValoresProvincias { get; set; }
        public virtual DbSet<DetalleValoresRubrosContable> DetalleValoresRubrosContables { get; set; }
        public virtual DbSet<ValoresFaltantesVisto> ValoresFaltantesVistos { get; set; }
        public virtual DbSet<DetallePlazosFijosRubrosContable> DetallePlazosFijosRubrosContables { get; set; }
        public virtual DbSet<Calidade_EF> Calidade_EF { get; set; }
        public virtual DbSet<CDPEstablecimiento> CDPEstablecimientos { get; set; }
        public virtual DbSet<CDPHumedade> CDPHumedades { get; set; }
        public virtual DbSet<WilliamsDestino> WilliamsDestinos { get; set; }
        public virtual DbSet<WilliamsMailFiltrosCola> WilliamsMailFiltrosColas { get; set; }
        public virtual DbSet<FertilizantesPuntosDespacho> FertilizantesPuntosDespachoes { get; set; }
        public virtual DbSet<FertilizantesTiposDespacho> FertilizantesTiposDespachoes { get; set; }
        public virtual DbSet<UsuariosRelacionFertilizantesPuntosDespacho> UsuariosRelacionFertilizantesPuntosDespachoes { get; set; }
        public virtual DbSet<UsuariosRelacionFertilizantesTiposDespacho> UsuariosRelacionFertilizantesTiposDespachoes { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Partido> Partidos { get; set; }
        public virtual DbSet<wTempCartasPorteFacturacionAutomatica_EF> wTempCartasPorteFacturacionAutomatica_EF { get; set; }
        public virtual DbSet<wGrillaPersistencia_EF> wGrillaPersistencia_EF { get; set; }
        public virtual DbSet<CartasDePorteLogDeOCR> CartasDePorteLogDeOCRs { get; set; }
        public virtual DbSet<DiccionarioEquivalencia> DiccionarioEquivalencias { get; set; }
        public virtual DbSet<ExcelImportador> ExcelImportadors { get; set; }
        public virtual DbSet<CartasDePorteControlDescarga> CartasDePorteControlDescargas { get; set; }
        public virtual DbSet<NovedadesUsuario> NovedadesUsuarios { get; set; }
        public virtual DbSet<DetalleEventosDelSistema> DetalleEventosDelSistemas { get; set; }
        public virtual DbSet<EventosDelSistema> EventosDelSistemas { get; set; }
        public virtual DbSet<CartasDePorte> CartasDePortes { get; set; }
    
        public virtual int Requerimientos_ActualizarEstado(Nullable<int> idRequerimiento, Nullable<int> idDetalleRequerimiento)
        {
            var idRequerimientoParameter = idRequerimiento.HasValue ?
                new ObjectParameter("IdRequerimiento", idRequerimiento) :
                new ObjectParameter("IdRequerimiento", typeof(int));
    
            var idDetalleRequerimientoParameter = idDetalleRequerimiento.HasValue ?
                new ObjectParameter("IdDetalleRequerimiento", idDetalleRequerimiento) :
                new ObjectParameter("IdDetalleRequerimiento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Requerimientos_ActualizarEstado", idRequerimientoParameter, idDetalleRequerimientoParameter);
        }
    
        public virtual ObjectResult<AutorizacionesPorComprobante> AutorizacionesPorComprobante_TX_AutorizacionesPorComprobante(Nullable<int> idFormulario, Nullable<int> idComprobante)
        {
            var idFormularioParameter = idFormulario.HasValue ?
                new ObjectParameter("IdFormulario", idFormulario) :
                new ObjectParameter("IdFormulario", typeof(int));
    
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AutorizacionesPorComprobante>("AutorizacionesPorComprobante_TX_AutorizacionesPorComprobante", idFormularioParameter, idComprobanteParameter);
        }
    
        public virtual int Cotizaciones_TX_PorFechaMoneda(Nullable<System.DateTime> fecha, Nullable<int> idMoneda)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idMonedaParameter = idMoneda.HasValue ?
                new ObjectParameter("IdMoneda", idMoneda) :
                new ObjectParameter("IdMoneda", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cotizaciones_TX_PorFechaMoneda", fechaParameter, idMonedaParameter);
        }
    
        public virtual int OrdenesCompra_TX_ItemsPendientesDeFacturar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrdenesCompra_TX_ItemsPendientesDeFacturar");
        }
    
        public virtual int Remitos_TX_ItemsPendientesDeFacturar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Remitos_TX_ItemsPendientesDeFacturar");
        }
    
        public virtual ObjectResult<Articulos_TX_DatosConCuenta_Result> Articulos_TX_DatosConCuenta(Nullable<int> idArticulo)
        {
            var idArticuloParameter = idArticulo.HasValue ?
                new ObjectParameter("IdArticulo", idArticulo) :
                new ObjectParameter("IdArticulo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Articulos_TX_DatosConCuenta_Result>("Articulos_TX_DatosConCuenta", idArticuloParameter);
        }
    
        public virtual int CtasCtesA_TXPorTrs(Nullable<int> idProveedor, Nullable<int> todo, Nullable<System.DateTime> fechaLimite, Nullable<System.DateTime> fechaDesde, Nullable<int> consolidar, string pendiente)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var todoParameter = todo.HasValue ?
                new ObjectParameter("Todo", todo) :
                new ObjectParameter("Todo", typeof(int));
    
            var fechaLimiteParameter = fechaLimite.HasValue ?
                new ObjectParameter("FechaLimite", fechaLimite) :
                new ObjectParameter("FechaLimite", typeof(System.DateTime));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var consolidarParameter = consolidar.HasValue ?
                new ObjectParameter("Consolidar", consolidar) :
                new ObjectParameter("Consolidar", typeof(int));
    
            var pendienteParameter = pendiente != null ?
                new ObjectParameter("Pendiente", pendiente) :
                new ObjectParameter("Pendiente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CtasCtesA_TXPorTrs", idProveedorParameter, todoParameter, fechaLimiteParameter, fechaDesdeParameter, consolidarParameter, pendienteParameter);
        }
    
        public virtual ObjectResult<OrdenesPago_TX_EnCaja_Result> OrdenesPago_TX_EnCaja(string estado, Nullable<int> idUsuario)
        {
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrdenesPago_TX_EnCaja_Result>("OrdenesPago_TX_EnCaja", estadoParameter, idUsuarioParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Autorizaciones_TX_CantidadAutorizaciones(Nullable<int> idFormulario, Nullable<decimal> importe, Nullable<int> idComprobante)
        {
            var idFormularioParameter = idFormulario.HasValue ?
                new ObjectParameter("IdFormulario", idFormulario) :
                new ObjectParameter("IdFormulario", typeof(int));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(decimal));
    
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Autorizaciones_TX_CantidadAutorizaciones", idFormularioParameter, importeParameter, idComprobanteParameter);
        }
    
        public virtual int AutorizacionesPorComprobante_A(ObjectParameter idAutorizacionPorComprobante, Nullable<int> idFormulario, Nullable<int> idComprobante, Nullable<int> ordenAutorizacion, Nullable<int> idAutorizo, Nullable<System.DateTime> fechaAutorizacion, string visto)
        {
            var idFormularioParameter = idFormulario.HasValue ?
                new ObjectParameter("IdFormulario", idFormulario) :
                new ObjectParameter("IdFormulario", typeof(int));
    
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var ordenAutorizacionParameter = ordenAutorizacion.HasValue ?
                new ObjectParameter("OrdenAutorizacion", ordenAutorizacion) :
                new ObjectParameter("OrdenAutorizacion", typeof(int));
    
            var idAutorizoParameter = idAutorizo.HasValue ?
                new ObjectParameter("IdAutorizo", idAutorizo) :
                new ObjectParameter("IdAutorizo", typeof(int));
    
            var fechaAutorizacionParameter = fechaAutorizacion.HasValue ?
                new ObjectParameter("FechaAutorizacion", fechaAutorizacion) :
                new ObjectParameter("FechaAutorizacion", typeof(System.DateTime));
    
            var vistoParameter = visto != null ?
                new ObjectParameter("Visto", visto) :
                new ObjectParameter("Visto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutorizacionesPorComprobante_A", idAutorizacionPorComprobante, idFormularioParameter, idComprobanteParameter, ordenAutorizacionParameter, idAutorizoParameter, fechaAutorizacionParameter, vistoParameter);
        }
    
        public virtual int wActualizacionesVariasPorComprobante(Nullable<int> idTipoCOmprobante, Nullable<int> idComprobante, string tipoMovimiento)
        {
            var idTipoCOmprobanteParameter = idTipoCOmprobante.HasValue ?
                new ObjectParameter("IdTipoCOmprobante", idTipoCOmprobante) :
                new ObjectParameter("IdTipoCOmprobante", typeof(int));
    
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var tipoMovimientoParameter = tipoMovimiento != null ?
                new ObjectParameter("TipoMovimiento", tipoMovimiento) :
                new ObjectParameter("TipoMovimiento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wActualizacionesVariasPorComprobante", idTipoCOmprobanteParameter, idComprobanteParameter, tipoMovimientoParameter);
        }
    
        public virtual int Valores_BorrarPorIdDetalleOrdenPagoValores(Nullable<int> idDetalleOrdenPagoValores)
        {
            var idDetalleOrdenPagoValoresParameter = idDetalleOrdenPagoValores.HasValue ?
                new ObjectParameter("IdDetalleOrdenPagoValores", idDetalleOrdenPagoValores) :
                new ObjectParameter("IdDetalleOrdenPagoValores", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Valores_BorrarPorIdDetalleOrdenPagoValores", idDetalleOrdenPagoValoresParameter);
        }
    
        public virtual int Valores_BorrarPorIdDetalleOrdenPagoCuentas(Nullable<int> idDetalleOrdenPagoCuentas)
        {
            var idDetalleOrdenPagoCuentasParameter = idDetalleOrdenPagoCuentas.HasValue ?
                new ObjectParameter("IdDetalleOrdenPagoCuentas", idDetalleOrdenPagoCuentas) :
                new ObjectParameter("IdDetalleOrdenPagoCuentas", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Valores_BorrarPorIdDetalleOrdenPagoCuentas", idDetalleOrdenPagoCuentasParameter);
        }
    
        public virtual int Obras_EliminarCuentasNoUsadasPorIdObra(Nullable<int> idObra)
        {
            var idObraParameter = idObra.HasValue ?
                new ObjectParameter("IdObra", idObra) :
                new ObjectParameter("IdObra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Obras_EliminarCuentasNoUsadasPorIdObra", idObraParameter);
        }
    
        public virtual int LogComprobantesElectronicos_InsertarRegistro(string tipo, string letra, Nullable<int> puntoVenta, Nullable<int> numeroComprobante, Nullable<int> identificador, string enviado, string recibido)
        {
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var letraParameter = letra != null ?
                new ObjectParameter("Letra", letra) :
                new ObjectParameter("Letra", typeof(string));
    
            var puntoVentaParameter = puntoVenta.HasValue ?
                new ObjectParameter("PuntoVenta", puntoVenta) :
                new ObjectParameter("PuntoVenta", typeof(int));
    
            var numeroComprobanteParameter = numeroComprobante.HasValue ?
                new ObjectParameter("NumeroComprobante", numeroComprobante) :
                new ObjectParameter("NumeroComprobante", typeof(int));
    
            var identificadorParameter = identificador.HasValue ?
                new ObjectParameter("Identificador", identificador) :
                new ObjectParameter("Identificador", typeof(int));
    
            var enviadoParameter = enviado != null ?
                new ObjectParameter("Enviado", enviado) :
                new ObjectParameter("Enviado", typeof(string));
    
            var recibidoParameter = recibido != null ?
                new ObjectParameter("Recibido", recibido) :
                new ObjectParameter("Recibido", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogComprobantesElectronicos_InsertarRegistro", tipoParameter, letraParameter, puntoVentaParameter, numeroComprobanteParameter, identificadorParameter, enviadoParameter, recibidoParameter);
        }
    
        public virtual int Articulos_TX_BD_ProntoMantenimientoTodos(Nullable<int> idObraPronto)
        {
            var idObraProntoParameter = idObraPronto.HasValue ?
                new ObjectParameter("IdObraPronto", idObraPronto) :
                new ObjectParameter("IdObraPronto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Articulos_TX_BD_ProntoMantenimientoTodos", idObraProntoParameter);
        }
    
        public virtual ObjectResult<CtasCtesD_TXPorTrs_AuxiliarEntityFramework_Result> CtasCtesD_TXPorTrs(Nullable<int> idCliente, Nullable<int> todo, Nullable<System.DateTime> fechaLimite, Nullable<System.DateTime> fechaDesde, Nullable<int> consolidar, string pendiente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var todoParameter = todo.HasValue ?
                new ObjectParameter("Todo", todo) :
                new ObjectParameter("Todo", typeof(int));
    
            var fechaLimiteParameter = fechaLimite.HasValue ?
                new ObjectParameter("FechaLimite", fechaLimite) :
                new ObjectParameter("FechaLimite", typeof(System.DateTime));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var consolidarParameter = consolidar.HasValue ?
                new ObjectParameter("Consolidar", consolidar) :
                new ObjectParameter("Consolidar", typeof(int));
    
            var pendienteParameter = pendiente != null ?
                new ObjectParameter("Pendiente", pendiente) :
                new ObjectParameter("Pendiente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CtasCtesD_TXPorTrs_AuxiliarEntityFramework_Result>("CtasCtesD_TXPorTrs", idClienteParameter, todoParameter, fechaLimiteParameter, fechaDesdeParameter, consolidarParameter, pendienteParameter);
        }
    
        public virtual ObjectResult<CtasCtesD_TXPorTrs_AuxiliarEntityFramework_Result1> CtasCtesD_TXPorTrs_AuxiliarEntityFramework(Nullable<int> idCliente, Nullable<int> todo, Nullable<System.DateTime> fechaLimite, Nullable<System.DateTime> fechaDesde, Nullable<int> consolidar, string pendiente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var todoParameter = todo.HasValue ?
                new ObjectParameter("Todo", todo) :
                new ObjectParameter("Todo", typeof(int));
    
            var fechaLimiteParameter = fechaLimite.HasValue ?
                new ObjectParameter("FechaLimite", fechaLimite) :
                new ObjectParameter("FechaLimite", typeof(System.DateTime));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var consolidarParameter = consolidar.HasValue ?
                new ObjectParameter("Consolidar", consolidar) :
                new ObjectParameter("Consolidar", typeof(int));
    
            var pendienteParameter = pendiente != null ?
                new ObjectParameter("Pendiente", pendiente) :
                new ObjectParameter("Pendiente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CtasCtesD_TXPorTrs_AuxiliarEntityFramework_Result1>("CtasCtesD_TXPorTrs_AuxiliarEntityFramework", idClienteParameter, todoParameter, fechaLimiteParameter, fechaDesdeParameter, consolidarParameter, pendienteParameter);
        }
    
        public virtual int Tree_TX_Actualizar(string clave, Nullable<int> idComprobante, string controlador)
        {
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var controladorParameter = controlador != null ?
                new ObjectParameter("Controlador", controlador) :
                new ObjectParameter("Controlador", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tree_TX_Actualizar", claveParameter, idComprobanteParameter, controladorParameter);
        }
    
        public virtual ObjectResult<Tree_TX_Arbol_Result> Tree_TX_Arbol(string grupoMenu)
        {
            var grupoMenuParameter = grupoMenu != null ?
                new ObjectParameter("GrupoMenu", grupoMenu) :
                new ObjectParameter("GrupoMenu", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tree_TX_Arbol_Result>("Tree_TX_Arbol", grupoMenuParameter);
        }
    
        public virtual int Tree_TX_Generar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tree_TX_Generar");
        }
    
        public virtual ObjectResult<wCartasDePorte_TX_EstadisticasDeDescarga_Result1> wCartasDePorte_TX_EstadisticasDeDescarga(Nullable<int> startRowIndex, Nullable<int> maximumRows, Nullable<int> estado, string queContenga, Nullable<int> idVendedor, Nullable<int> idCorredor, Nullable<int> idDestinatario, Nullable<int> idIntermediario, Nullable<int> idRemComercial, Nullable<int> idArticulo, Nullable<int> idProcedencia, Nullable<int> idDestino, Nullable<int> aplicarANDuORalFiltro, string modoExportacion, Nullable<System.DateTime> fechadesde, Nullable<System.DateTime> fechahasta, Nullable<int> puntoventa, string optDivisionSyngenta, string contrato, string queContenga2, Nullable<int> idClienteAuxiliarint, Nullable<int> agrupadorDeTandaPeriodos, Nullable<int> vagon, string patente, string optCamionVagon, Nullable<System.DateTime> fechadesdeAnterior, Nullable<System.DateTime> fechahastaAnterior)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("startRowIndex", startRowIndex) :
                new ObjectParameter("startRowIndex", typeof(int));
    
            var maximumRowsParameter = maximumRows.HasValue ?
                new ObjectParameter("maximumRows", maximumRows) :
                new ObjectParameter("maximumRows", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(int));
    
            var queContengaParameter = queContenga != null ?
                new ObjectParameter("QueContenga", queContenga) :
                new ObjectParameter("QueContenga", typeof(string));
    
            var idVendedorParameter = idVendedor.HasValue ?
                new ObjectParameter("idVendedor", idVendedor) :
                new ObjectParameter("idVendedor", typeof(int));
    
            var idCorredorParameter = idCorredor.HasValue ?
                new ObjectParameter("idCorredor", idCorredor) :
                new ObjectParameter("idCorredor", typeof(int));
    
            var idDestinatarioParameter = idDestinatario.HasValue ?
                new ObjectParameter("idDestinatario", idDestinatario) :
                new ObjectParameter("idDestinatario", typeof(int));
    
            var idIntermediarioParameter = idIntermediario.HasValue ?
                new ObjectParameter("idIntermediario", idIntermediario) :
                new ObjectParameter("idIntermediario", typeof(int));
    
            var idRemComercialParameter = idRemComercial.HasValue ?
                new ObjectParameter("idRemComercial", idRemComercial) :
                new ObjectParameter("idRemComercial", typeof(int));
    
            var idArticuloParameter = idArticulo.HasValue ?
                new ObjectParameter("idArticulo", idArticulo) :
                new ObjectParameter("idArticulo", typeof(int));
    
            var idProcedenciaParameter = idProcedencia.HasValue ?
                new ObjectParameter("idProcedencia", idProcedencia) :
                new ObjectParameter("idProcedencia", typeof(int));
    
            var idDestinoParameter = idDestino.HasValue ?
                new ObjectParameter("idDestino", idDestino) :
                new ObjectParameter("idDestino", typeof(int));
    
            var aplicarANDuORalFiltroParameter = aplicarANDuORalFiltro.HasValue ?
                new ObjectParameter("AplicarANDuORalFiltro", aplicarANDuORalFiltro) :
                new ObjectParameter("AplicarANDuORalFiltro", typeof(int));
    
            var modoExportacionParameter = modoExportacion != null ?
                new ObjectParameter("ModoExportacion", modoExportacion) :
                new ObjectParameter("ModoExportacion", typeof(string));
    
            var fechadesdeParameter = fechadesde.HasValue ?
                new ObjectParameter("fechadesde", fechadesde) :
                new ObjectParameter("fechadesde", typeof(System.DateTime));
    
            var fechahastaParameter = fechahasta.HasValue ?
                new ObjectParameter("fechahasta", fechahasta) :
                new ObjectParameter("fechahasta", typeof(System.DateTime));
    
            var puntoventaParameter = puntoventa.HasValue ?
                new ObjectParameter("puntoventa", puntoventa) :
                new ObjectParameter("puntoventa", typeof(int));
    
            var optDivisionSyngentaParameter = optDivisionSyngenta != null ?
                new ObjectParameter("optDivisionSyngenta", optDivisionSyngenta) :
                new ObjectParameter("optDivisionSyngenta", typeof(string));
    
            var contratoParameter = contrato != null ?
                new ObjectParameter("Contrato", contrato) :
                new ObjectParameter("Contrato", typeof(string));
    
            var queContenga2Parameter = queContenga2 != null ?
                new ObjectParameter("QueContenga2", queContenga2) :
                new ObjectParameter("QueContenga2", typeof(string));
    
            var idClienteAuxiliarintParameter = idClienteAuxiliarint.HasValue ?
                new ObjectParameter("idClienteAuxiliarint", idClienteAuxiliarint) :
                new ObjectParameter("idClienteAuxiliarint", typeof(int));
    
            var agrupadorDeTandaPeriodosParameter = agrupadorDeTandaPeriodos.HasValue ?
                new ObjectParameter("AgrupadorDeTandaPeriodos", agrupadorDeTandaPeriodos) :
                new ObjectParameter("AgrupadorDeTandaPeriodos", typeof(int));
    
            var vagonParameter = vagon.HasValue ?
                new ObjectParameter("Vagon", vagon) :
                new ObjectParameter("Vagon", typeof(int));
    
            var patenteParameter = patente != null ?
                new ObjectParameter("Patente", patente) :
                new ObjectParameter("Patente", typeof(string));
    
            var optCamionVagonParameter = optCamionVagon != null ?
                new ObjectParameter("optCamionVagon", optCamionVagon) :
                new ObjectParameter("optCamionVagon", typeof(string));
    
            var fechadesdeAnteriorParameter = fechadesdeAnterior.HasValue ?
                new ObjectParameter("fechadesdeAnterior", fechadesdeAnterior) :
                new ObjectParameter("fechadesdeAnterior", typeof(System.DateTime));
    
            var fechahastaAnteriorParameter = fechahastaAnterior.HasValue ?
                new ObjectParameter("fechahastaAnterior", fechahastaAnterior) :
                new ObjectParameter("fechahastaAnterior", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<wCartasDePorte_TX_EstadisticasDeDescarga_Result1>("wCartasDePorte_TX_EstadisticasDeDescarga", startRowIndexParameter, maximumRowsParameter, estadoParameter, queContengaParameter, idVendedorParameter, idCorredorParameter, idDestinatarioParameter, idIntermediarioParameter, idRemComercialParameter, idArticuloParameter, idProcedenciaParameter, idDestinoParameter, aplicarANDuORalFiltroParameter, modoExportacionParameter, fechadesdeParameter, fechahastaParameter, puntoventaParameter, optDivisionSyngentaParameter, contratoParameter, queContenga2Parameter, idClienteAuxiliarintParameter, agrupadorDeTandaPeriodosParameter, vagonParameter, patenteParameter, optCamionVagonParameter, fechadesdeAnteriorParameter, fechahastaAnteriorParameter);
        }
    
        [DbFunction("DemoProntoEntities", "fSQL_GetDataTableFiltradoYPaginado")]
        public virtual IQueryable<fSQL_GetDataTableFiltradoYPaginado_Result3> fSQL_GetDataTableFiltradoYPaginado(Nullable<int> startRowIndex, Nullable<int> maximumRows, Nullable<int> estado, string queContenga, Nullable<int> idVendedor, Nullable<int> idCorredor, Nullable<int> idDestinatario, Nullable<int> idIntermediario, Nullable<int> idRemComercial, Nullable<int> idArticulo, Nullable<int> idProcedencia, Nullable<int> idDestino, Nullable<int> aplicarANDuORalFiltro, string modoExportacion, Nullable<System.DateTime> fechadesde, Nullable<System.DateTime> fechahasta, Nullable<int> puntoventa, Nullable<int> idAcopio, Nullable<bool> bTraerDuplicados, string contrato, string queContenga2, Nullable<int> idClienteAuxiliarint, Nullable<int> agrupadorDeTandaPeriodos, Nullable<int> vagon, string patente, string optCamionVagon)
        {
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("startRowIndex", startRowIndex) :
                new ObjectParameter("startRowIndex", typeof(int));
    
            var maximumRowsParameter = maximumRows.HasValue ?
                new ObjectParameter("maximumRows", maximumRows) :
                new ObjectParameter("maximumRows", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(int));
    
            var queContengaParameter = queContenga != null ?
                new ObjectParameter("QueContenga", queContenga) :
                new ObjectParameter("QueContenga", typeof(string));
    
            var idVendedorParameter = idVendedor.HasValue ?
                new ObjectParameter("idVendedor", idVendedor) :
                new ObjectParameter("idVendedor", typeof(int));
    
            var idCorredorParameter = idCorredor.HasValue ?
                new ObjectParameter("idCorredor", idCorredor) :
                new ObjectParameter("idCorredor", typeof(int));
    
            var idDestinatarioParameter = idDestinatario.HasValue ?
                new ObjectParameter("idDestinatario", idDestinatario) :
                new ObjectParameter("idDestinatario", typeof(int));
    
            var idIntermediarioParameter = idIntermediario.HasValue ?
                new ObjectParameter("idIntermediario", idIntermediario) :
                new ObjectParameter("idIntermediario", typeof(int));
    
            var idRemComercialParameter = idRemComercial.HasValue ?
                new ObjectParameter("idRemComercial", idRemComercial) :
                new ObjectParameter("idRemComercial", typeof(int));
    
            var idArticuloParameter = idArticulo.HasValue ?
                new ObjectParameter("idArticulo", idArticulo) :
                new ObjectParameter("idArticulo", typeof(int));
    
            var idProcedenciaParameter = idProcedencia.HasValue ?
                new ObjectParameter("idProcedencia", idProcedencia) :
                new ObjectParameter("idProcedencia", typeof(int));
    
            var idDestinoParameter = idDestino.HasValue ?
                new ObjectParameter("idDestino", idDestino) :
                new ObjectParameter("idDestino", typeof(int));
    
            var aplicarANDuORalFiltroParameter = aplicarANDuORalFiltro.HasValue ?
                new ObjectParameter("AplicarANDuORalFiltro", aplicarANDuORalFiltro) :
                new ObjectParameter("AplicarANDuORalFiltro", typeof(int));
    
            var modoExportacionParameter = modoExportacion != null ?
                new ObjectParameter("ModoExportacion", modoExportacion) :
                new ObjectParameter("ModoExportacion", typeof(string));
    
            var fechadesdeParameter = fechadesde.HasValue ?
                new ObjectParameter("fechadesde", fechadesde) :
                new ObjectParameter("fechadesde", typeof(System.DateTime));
    
            var fechahastaParameter = fechahasta.HasValue ?
                new ObjectParameter("fechahasta", fechahasta) :
                new ObjectParameter("fechahasta", typeof(System.DateTime));
    
            var puntoventaParameter = puntoventa.HasValue ?
                new ObjectParameter("puntoventa", puntoventa) :
                new ObjectParameter("puntoventa", typeof(int));
    
            var idAcopioParameter = idAcopio.HasValue ?
                new ObjectParameter("IdAcopio", idAcopio) :
                new ObjectParameter("IdAcopio", typeof(int));
    
            var bTraerDuplicadosParameter = bTraerDuplicados.HasValue ?
                new ObjectParameter("bTraerDuplicados", bTraerDuplicados) :
                new ObjectParameter("bTraerDuplicados", typeof(bool));
    
            var contratoParameter = contrato != null ?
                new ObjectParameter("Contrato", contrato) :
                new ObjectParameter("Contrato", typeof(string));
    
            var queContenga2Parameter = queContenga2 != null ?
                new ObjectParameter("QueContenga2", queContenga2) :
                new ObjectParameter("QueContenga2", typeof(string));
    
            var idClienteAuxiliarintParameter = idClienteAuxiliarint.HasValue ?
                new ObjectParameter("idClienteAuxiliarint", idClienteAuxiliarint) :
                new ObjectParameter("idClienteAuxiliarint", typeof(int));
    
            var agrupadorDeTandaPeriodosParameter = agrupadorDeTandaPeriodos.HasValue ?
                new ObjectParameter("AgrupadorDeTandaPeriodos", agrupadorDeTandaPeriodos) :
                new ObjectParameter("AgrupadorDeTandaPeriodos", typeof(int));
    
            var vagonParameter = vagon.HasValue ?
                new ObjectParameter("Vagon", vagon) :
                new ObjectParameter("Vagon", typeof(int));
    
            var patenteParameter = patente != null ?
                new ObjectParameter("Patente", patente) :
                new ObjectParameter("Patente", typeof(string));
    
            var optCamionVagonParameter = optCamionVagon != null ?
                new ObjectParameter("optCamionVagon", optCamionVagon) :
                new ObjectParameter("optCamionVagon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fSQL_GetDataTableFiltradoYPaginado_Result3>("[DemoProntoEntities].[fSQL_GetDataTableFiltradoYPaginado](@startRowIndex, @maximumRows, @estado, @QueContenga, @idVendedor, @idCorredor, @idDestinatario, @idIntermediario, @idRemComercial, @idArticulo, @idProcedencia, @idDestino, @AplicarANDuORalFiltro, @ModoExportacion, @fechadesde, @fechahasta, @puntoventa, @IdAcopio, @bTraerDuplicados, @Contrato, @QueContenga2, @idClienteAuxiliarint, @AgrupadorDeTandaPeriodos, @Vagon, @Patente, @optCamionVagon)", startRowIndexParameter, maximumRowsParameter, estadoParameter, queContengaParameter, idVendedorParameter, idCorredorParameter, idDestinatarioParameter, idIntermediarioParameter, idRemComercialParameter, idArticuloParameter, idProcedenciaParameter, idDestinoParameter, aplicarANDuORalFiltroParameter, modoExportacionParameter, fechadesdeParameter, fechahastaParameter, puntoventaParameter, idAcopioParameter, bTraerDuplicadosParameter, contratoParameter, queContenga2Parameter, idClienteAuxiliarintParameter, agrupadorDeTandaPeriodosParameter, vagonParameter, patenteParameter, optCamionVagonParameter);
        }
    
        public virtual int Requerimientos_TX_PendientesDeAsignacion(string depositos)
        {
            var depositosParameter = depositos != null ?
                new ObjectParameter("Depositos", depositos) :
                new ObjectParameter("Depositos", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Requerimientos_TX_PendientesDeAsignacion", depositosParameter);
        }
    
        public virtual int Requerimientos_TX_PendientesDeAsignacion1(string depositos)
        {
            var depositosParameter = depositos != null ?
                new ObjectParameter("Depositos", depositos) :
                new ObjectParameter("Depositos", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Requerimientos_TX_PendientesDeAsignacion1", depositosParameter);
        }
    }
}
