@model ProntoMVC.Data.Models.Empleado

@{
    ViewBag.Title = "Edit";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <fieldset>
        <div class="container-fluid">
            <legend>Empleado</legend>
            <div class="row-fluid">
                <div>
                    @Html.Hidden("IdTransportista", Model.IdEmpleado)
                    @Html.HiddenFor(model => model.IdEmpleado)
                </div>

                <div class="row-fluid">
                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.Legajo, "Legajo")
                        @Html.TextBoxFor(model => model.Legajo, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.Legajo)
                    </div>

                    <div class="span4 lightblue">
                        @Html.LabelFor(model => model.Nombre, "Nombre")
                        @Html.TextBoxFor(model => model.Nombre, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.Nombre)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.UsuarioNT, "Usuario de red")
                        @Html.TextBoxFor(model => model.UsuarioNT, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.UsuarioNT)
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.Password, "Password")
                        @Html.TextBoxFor(model => model.Password, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.Password)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.Iniciales, "Iniciales")
                        @Html.TextBoxFor(model => model.Iniciales, new { @class = "span4" })
                        @Html.ValidationMessageFor(model => model.Iniciales)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.Interno, "Interno")
                        @Html.TextBoxFor(model => model.Interno, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.Interno)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.FechaNacimiento, "Fecha de nacimiento")
                        @Html.TextBoxFor(model => model.FechaNacimiento, new Dictionary<string, object> { { "class", "span12" }, { "placeholder", "dd/mm/yyyy" } })
                        @Html.ValidationMessageFor(model => model.FechaNacimiento)
                        <script type="text/jscript">
                            $("#FechaNacimiento").datepicker({
                                changeMonth: true,
                                changeYear: true
                                //numberOfMonths: 2,
                            });
                        </script>
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.IdSector, "Sector")
                        @Html.DropDownList("IdSector", null, "", new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.IdSector)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.IdCargo, "Cargo")
                        @Html.DropDownList("IdCargo", null, "", new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.IdCargo)
                    </div>

                    <div class="span4 lightblue">
                        @Html.LabelFor(model => model.Email, "Email")
                        @Html.TextBoxFor(model => model.Email, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.CuentaBancaria, "Numero de cuenta bancaria")
                        @Html.TextBoxFor(model => model.CuentaBancaria, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.CuentaBancaria)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.InformacionAuxiliar, "Informacion auxiliar")
                        @Html.TextBoxFor(model => model.InformacionAuxiliar, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.InformacionAuxiliar)
                    </div>

                    <div class="span4 lightblue">
                        @Html.LabelFor(model => model.IdCuentaFondoFijo, "Cuenta de fondo fijo asignada")
                        @Html.DropDownList("IdCuentaFondoFijo", null, "", new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.IdCuentaFondoFijo)
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="span4 lightblue">
                        @Html.LabelFor(model => model.IdObraAsignada, "Obra asignada")
                        @Html.DropDownList("IdObraAsignada", null, "", new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.IdObraAsignada)
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.Administrador, "Administrador")
                        @Html.RadioButtonFor(model => model.Administrador, "SI") SI
                        @Html.RadioButtonFor(model => model.Administrador, "NO") NO
                        @Html.ValidationMessageFor(model => model.Administrador)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.Activo, "Activo?")
                        @Html.RadioButtonFor(model => model.Activo, "SI") SI
                        @Html.RadioButtonFor(model => model.Activo, "NO") NO
                        @Html.ValidationMessageFor(model => model.Activo)
                    </div>

                    <div class="span4 lightblue">
                        @Html.LabelFor(model => model.TipoUsuario, "Tipo de usuario")
                        @Html.RadioButtonFor(model => model.TipoUsuario, 1) Propio
                        @Html.RadioButtonFor(model => model.TipoUsuario, 2) Obras propias
                        @Html.RadioButtonFor(model => model.TipoUsuario, 3) Obras ext.
                        @Html.RadioButtonFor(model => model.TipoUsuario, 4) Tercerizado
                        @Html.ValidationMessageFor(model => model.TipoUsuario)
                    </div>
                </div>

                <br />

                <div class="row-fluid">
                    <div class="span3 lightblue">
                        <table id="ListaIngresoEgreso" class="scroll" cellpadding="0" cellspacing="0"></table>
                        <div id="ListaPager1" class="scroll" style="text-align: center; height: 30px"></div>
                    </div>
                    <div class="span3 lightblue">
                        <table id="ListaSectores" class="scroll" cellpadding="0" cellspacing="0"></table>
                        <div id="ListaPager2" class="scroll" style="text-align: center; height: 30px"></div>
                    </div>
                    <div class="span3 lightblue">
                        <table id="ListaJornadas" class="scroll" cellpadding="0" cellspacing="0"></table>
                        <div id="ListaPager3" class="scroll" style="text-align: center; height: 30px"></div>
                    </div>
                </div>

                <br />

                <div class="row-fluid">
                    <div class="span3 lightblue">
                        <table id="ListaCuentasBancarias" class="scroll" cellpadding="0" cellspacing="0"></table>
                        <div id="ListaPager4" class="scroll" style="text-align: center; height: 30px"></div>
                    </div>
                    <div class="span3 lightblue">
                        <table id="ListaUbicaciones" class="scroll" cellpadding="0" cellspacing="0"></table>
                        <div id="ListaPager5" class="scroll" style="text-align: center; height: 30px"></div>
                    </div>
                </div>

                <br />

                <p>
                    <input type="submit" value="Guardar" />
                </p>
                <div>
                    @Html.ActionLink("Volver al listado", "Index")
                </div>
            </div>
        </div>
</fieldset>

<script type="text/javascript">
    $(document).ready(function () {
        var lastSelectedId;
        var inEdit;

        $('.ui-jqgrid .ui-jqgrid-htable th div').css('white-space', 'normal');

        $('#ListaIngresoEgreso').jqGrid({
            url: ROOT + 'Empleado/DetEmpleados/',
            postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
            datatype: 'json',
            mtype: 'POST',
            shrinkToFit: true,
            colNames: ['Acciones', 'IdDetalleEmpleado', 'IdEmpleado', 'Fecha de ingreso', 'Fecha de egreso'],
            colModel: [
                        { name: 'act', index: 'act', align: 'center', width: 50, sortable: false, editable: false, search: false },
                        { name: 'IdDetalleEmpleado', index: 'IdDetalleEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                        { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                        { name: 'FechaIngreso', index: 'FechaIngreso', width: 100, align: 'center', sorttype: 'date', editable: false, formatoptions: { newformat: 'dd/mm/yy' }, datefmt: 'dd/mm/yy', search: false },
                        { name: 'FechaEgreso', index: 'FechaEgreso', width: 100, align: 'center', sorttype: 'date', editable: false, formatoptions: { newformat: 'dd/mm/yy' }, datefmt: 'dd/mm/yy', search: false }
                    ],
            onSelectRow: function (id) {
                if (id && id !== lastSelectedId) {
                    if (typeof lastSelectedId !== "undefined") {
                        grid.jqGrid('restoreRow', lastSelectedId);
                    }
                    lastSelectedId = id;
                }
            },
            pager: $('#ListaPager1'),
            rowNum: 15,
            rowList: [10, 20, 50, 100],
            sortname: 'FechaIngreso',
            sortorder: 'asc',
            viewrecords: true,
            width: '300',
            //height: '100%',
            altRows: false,
            footerrow: true,
            userDataOnFooter: true,
            caption: '<b>INGRESOS - EGRESOS</b>'
        });
        jQuery("#ListaIngresoEgreso").jqGrid('navGrid', '#ListaPager1', { refresh: true, add: false, edit: false, del: false }, {}, {}, {}, { sopt: ["cn"], width: 700, closeOnEscape: true, closeAfterSearch: true });
        jQuery("#ListaIngresoEgreso").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });

        $('#ListaSectores').jqGrid({
            url: ROOT + 'Empleado/DetEmpleadosSectores/',
            postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
            datatype: 'json',
            mtype: 'POST',
            shrinkToFit: true,
            colNames: ['Acciones', 'IdDetalleEmpleadoSector', 'IdEmpleado', 'Fecha de cambio', 'Sector'],
            colModel: [
                        { name: 'act', index: 'act', align: 'center', width: 50, sortable: false, editable: false, search: false },
                        { name: 'IdDetalleEmpleadoSector', index: 'IdDetalleEmpleadoSector', align: 'left', width: 100, editable: false, hidden: true },
                        { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                        { name: 'FechaCambio', index: 'FechaCambio', width: 100, align: 'center', sorttype: 'date', editable: true, formatoptions: { newformat: 'dd/mm/yy' }, datefmt: 'dd/mm/yy', search: false, editrules: { required: false } },
                        { name: 'Sector', index: 'Sector', align: 'left', width: 100, editable: true, search: true, searchoptions: { sopt: ['cn'] }, editrules: { required: false } }
            ],
            onSelectRow: function (id) {
                if (id && id !== lastSelectedId) {
                    if (typeof lastSelectedId !== "undefined") {
                        grid.jqGrid('restoreRow', lastSelectedId);
                    }
                    lastSelectedId = id;
                }
            },
            pager: $('#ListaPager2'),
            rowNum: 15,
            rowList: [10, 20, 50, 100],
            sortname: 'FechaCambio',
            sortorder: 'asc',
            viewrecords: true,
            width: '300',
            //height: '100%',
            altRows: false,
            footerrow: true,
            userDataOnFooter: true,
            caption: '<b>CAMBIOS DE SECTORES</b>'
        });
        jQuery("#ListaSectores").jqGrid('navGrid', '#ListaPager2', { refresh: true, add: false, edit: false, del: false }, {}, {}, {}, { sopt: ["cn"], width: 700, closeOnEscape: true, closeAfterSearch: true });
        jQuery("#ListaSectores").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });

        $('#ListaJornadas').jqGrid({
            url: ROOT + 'Empleado/DetEmpleadosJornadas/',
            postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
            datatype: 'json',
            mtype: 'POST',
            shrinkToFit: true,
            colNames: ['Acciones', 'IdDetalleEmpleadoJornada', 'IdEmpleado', 'Fecha de cambio', 'Hs.p/jornada'],
            colModel: [
                        { name: 'act', index: 'act', align: 'center', width: 50, sortable: false, editable: false, search: false },
                        { name: 'IdDetalleEmpleadoJornada', index: 'IdDetalleEmpleadoJornada', align: 'left', width: 100, editable: false, hidden: true },
                        { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                        { name: 'FechaCambio', index: 'FechaCambio', width: 100, align: 'center', sorttype: 'date', editable: false, formatoptions: { newformat: 'dd/mm/yy' }, datefmt: 'dd/mm/yy', search: false },

                        {
                            name: 'HorasJornada', index: 'HorasJornada', label: 'TB', align: 'right', width: 80, editable: true, hidden: false, edittype: 'currency',
                            editoptions: {maxlength: 20, defaultValue: '0.00',
                            dataEvents: [{ type: 'change', fn: function (e) { CalcularItem(); } },
                                         {
                                             type: 'keypress',
                                             fn: function (e) {
                                                 if (e.keyCode >= 48 && e.keyCode <= 57) {
                                                     return true;
                                                 } else {
                                                     alert("nada de letras");
                                                     return false;
                                                 }
                                             }
                                         }
                            ]

                        }, editrules: { required: false }, defaultValue: 0}
            ],
            onSelectRow: function (id) {
                if (id && id !== lastSelectedId) {
                    if (typeof lastSelectedId !== "undefined") {
                        grid.jqGrid('restoreRow', lastSelectedId);
                    }
                    lastSelectedId = id;
                }
            },
            pager: $('#ListaPager3'),
            rowNum: 15,
            rowList: [10, 20, 50, 100],
            sortname: 'FechaCambio',
            sortorder: 'asc',
            viewrecords: true,
            width: '300',
            //height: '100%',
            altRows: false,
            footerrow: true,
            userDataOnFooter: true,
            caption: '<b>JORNADAS</b>'
        });
        jQuery("#ListaJornadas").jqGrid('navGrid', '#ListaPager3', { refresh: true, add: true, edit: true, del: true }, {}, {}, {}, { sopt: ["cn"], width: 700, closeOnEscape: true, closeAfterSearch: true });
        jQuery("#ListaJornadas").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });

        $('#ListaCuentasBancarias').jqGrid({
            url: ROOT + 'Empleado/DetEmpleadosCuentasBancarias/',
            postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
            datatype: 'json',
            mtype: 'POST',
            shrinkToFit: true,
            colNames: ['Acciones', 'IdDetalleEmpleadoCuentaBancaria', 'IdEmpleado', 'Banco', 'Cuenta bancaria'],
            colModel: [
                        { name: 'act', index: 'act', align: 'center', width: 50, sortable: false, editable: false, search: false },
                        { name: 'IdDetalleEmpleadoCuentaBancaria', index: 'IdDetalleEmpleadoCuentaBancaria', align: 'left', width: 100, editable: false, hidden: true },
                        { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                        { name: 'Banco', index: 'Banco', align: 'left', width: 100, editable: false, search: true, searchoptions: { sopt: ['cn'] } },
                        { name: 'CuentaBancaria', index: 'CuentaBancaria', align: 'left', width: 100, editable: false, search: true, searchoptions: { sopt: ['cn'] } }
            ],
            onSelectRow: function (id) {
                if (id && id !== lastSelectedId) {
                    if (typeof lastSelectedId !== "undefined") {
                        grid.jqGrid('restoreRow', lastSelectedId);
                    }
                    lastSelectedId = id;
                }
            },
            pager: $('#ListaPager4'),
            rowNum: 15,
            rowList: [10, 20, 50, 100],
            sortname: 'CuentaBancaria',
            sortorder: 'asc',
            viewrecords: true,
            width: '300',
            //height: '100%',
            altRows: false,
            footerrow: true,
            userDataOnFooter: true,
            caption: '<b>CUENTAS BANCARIAS ASIGNADAS</b>'
        });
        jQuery("#ListaCuentasBancarias").jqGrid('navGrid', '#ListaPager4', { refresh: true, add: false, edit: false, del: false }, {}, {}, {}, { sopt: ["cn"], width: 700, closeOnEscape: true, closeAfterSearch: true });
        jQuery("#ListaCuentasBancarias").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });

        $('#ListaUbicaciones').jqGrid({

            url: ROOT + 'Empleado/DetEmpleadosUbicaciones/',
            postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
            datatype: 'json',
            mtype: 'POST',
            shrinkToFit: true,
            colNames: ['Acciones', 'IdDetalleEmpleadoCuentaBancaria', 'IdEmpleado', 'Cuenta bancaria'],
            colModel: [
                        { name: 'act', index: 'act', align: 'center', width: 50, sortable: false, editable: false, search: false },
                        { name: 'IdDetalleEmpleadoCuentaBancaria', index: 'IdDetalleEmpleadoCuentaBancaria', align: 'left', width: 100, editable: false, hidden: true },
                        { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                        { name: 'CuentaBancaria', index: 'CuentaBancaria', align: 'left', width: 100, editable: false, search: true, searchoptions: { sopt: ['cn'] } }
            ],
            onSelectRow: function (id) {
                if (id && id !== lastSelectedId) {
                    if (typeof lastSelectedId !== "undefined") {
                        grid.jqGrid('restoreRow', lastSelectedId);
                    }
                    lastSelectedId = id;
                }
            },
            pager: $('#ListaPager5'),
            rowNum: 15,
            rowList: [10, 20, 50, 100],
            sortname: 'CuentaBancaria',
            sortorder: 'asc',
            viewrecords: true,
            width: '300',
            //height: '100%',
            altRows: false,
            footerrow: true,
            userDataOnFooter: true,
            caption: '<b>UBICACIONES ASIGNADAS</b>'
        });
        jQuery("#ListaUbicaciones").jqGrid('navGrid', '#ListaPager5', { refresh: true, add: false, edit: false, del: false }, {}, {}, {}, { sopt: ["cn"], width: 700, closeOnEscape: true, closeAfterSearch: true });
        jQuery("#ListaUbicaciones").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });
    });

</script>
}
