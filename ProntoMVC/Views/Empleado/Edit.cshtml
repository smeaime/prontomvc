@model ProntoMVC.Data.Models.Empleado

@{
    ViewBag.Title = "Empleado";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>



<form id="principal" class="container-fluid" style="padding-left: 0px; padding-right: 0px;">
    <form class="form-horizontal" style=" margin-bottom: 0px;">

        @Html.ValidationSummary(true)


        <div id="cuerpomaspie" class="" style="padding-bottom:2px; position: relative; height: 100%  " @*Height of the footer *@>
            <div id="conscroll" style="height: 600px; margin-bottom: 40px; overflow-y: scroll; top: 50px; padding-left: 25px; padding-right: 25px; overflow-x: hidden;">


                <div class="row-fluid" style="margin-bottom: 15px; margin-top: 5px;">
                    <div class="span7 lightblue titulo">
                        Empleado @(Model.Nombre)
                        @*@Html.TextBox( "TituloFormulario",  "Empleado", 
                        new { style = "-webkit-box-shadow: none; -moz-box-shadow: none; box-shadow: none; ", @class = "span8 titulo", @readonly = "readonly" })*@
                    </div>
                 
                </div>
                <div class="row-fluid">
                    <div>
                        @Html.Hidden("IdEmpleado", Model.IdEmpleado)
                        @Html.HiddenFor(model => model.IdEmpleado)
                    </div>

                    <div class="row-fluid">
                        <div class="span2 lightblue">
                            @Html.LabelFor(model => model.Legajo, "Legajo")
                            @Html.TextBoxFor(model => model.Legajo, new { @class = "span12" })
                            @Html.ValidationMessageFor(model => model.Legajo)
                        </div>

                        <div class="span5 lightblue">
                            @Html.LabelFor(model => model.Nombre, "Nombre")
                            @Html.TextBoxFor(model => model.Nombre, new { @class = "span12" })
                            @Html.ValidationMessageFor(model => model.Nombre)
                        </div>

                        <div class="span2 lightblue">
                            @Html.LabelFor(model => model.UsuarioNT, "Usuario de red")
                            @Html.TextBoxFor(model => model.UsuarioNT, new { @class = "span12" })
                            @Html.ValidationMessageFor(model => model.UsuarioNT)
                        </div>
                    </div>

                    <div class="row-fluid">
                        <div class="span2 lightblue">
                            @Html.LabelFor(model => model.Password, "Password")
                            @Html.TextBoxFor(model => model.Password, new { @class = "span12" })
                            @Html.ValidationMessageFor(model => model.Password)
                        </div>

                        <div class="span2 lightblue">
                            @Html.LabelFor(model => model.Iniciales, "Iniciales")<br /> 
                            @Html.TextBoxFor(model => model.Iniciales, new { @class = "span4" })
                            @Html.ValidationMessageFor(model => model.Iniciales)
                        </div>

                        <div class="span2 lightblue">
                            @Html.LabelFor(model => model.Interno, "Interno")
                            @Html.TextBoxFor(model => model.Interno, new { @class = "span12" })
                            @Html.ValidationMessageFor(model => model.Interno)
                        </div>

                        <div class="span2 lightblue">
                            @Html.LabelFor(model => model.FechaNacimiento, "Fecha de nacimiento")
                            @Html.TextBoxFor(model => model.FechaNacimiento, new Dictionary<string, object> { { "class", "span12" }, { "placeholder", "dd/mm/yyyy" } })
                            @Html.ValidationMessageFor(model => model.FechaNacimiento)
                            <script type="text/jscript">
                                            $("#FechaNacimiento").datepicker({
                                                changeMonth: true,
                                                changeYear: true
                                                //numberOfMonths: 2,
                                            });
                            </script>
                        </div>
                    </div>

                    <div class="row-fluid">
                        <div class="span2 lightblue">
                            @Html.LabelFor(model => model.IdSector, "Sector")
                            @Html.DropDownList("IdSector", null, "", new { @class = "span12" })
                            @Html.ValidationMessageFor(model => model.IdSector)
                        </div>

                        <div class="span2 lightblue">
                            @Html.LabelFor(model => model.IdCargo, "Cargo")
                            @Html.DropDownList("IdCargo", null, "", new { @class = "span12" })
                            @Html.ValidationMessageFor(model => model.IdCargo)
                        </div>

                        <div class="span4 lightblue">
                            @Html.LabelFor(model => model.Email, "Email")
                            @Html.TextBoxFor(model => model.Email, new { @class = "span12" })
                            @Html.ValidationMessageFor(model => model.Email)
                        </div>
                    </div>

                    <div class="row-fluid">
                        <div class="span2 lightblue">
                            @Html.LabelFor(model => model.CuentaBancaria, "Numero de cuenta bancaria")
                            @Html.TextBoxFor(model => model.CuentaBancaria, new { @class = "span12" })
                            @Html.ValidationMessageFor(model => model.CuentaBancaria)
                        </div>

                        <div class="span2 lightblue">
                            @Html.LabelFor(model => model.InformacionAuxiliar, "Informacion auxiliar")
                            @Html.TextBoxFor(model => model.InformacionAuxiliar, new { @class = "span12" })
                            @Html.ValidationMessageFor(model => model.InformacionAuxiliar)
                        </div>

                        <div class="span4 lightblue">
                            @Html.LabelFor(model => model.IdCuentaFondoFijo, "Cuenta de fondo fijo asignada")
                            @Html.DropDownList("IdCuentaFondoFijo", null, "", new { @class = "span12" })
                            @Html.ValidationMessageFor(model => model.IdCuentaFondoFijo)
                        </div>
                    </div>

                    <div class="row-fluid">
                        <div class="span4 lightblue">
                            @Html.LabelFor(model => model.IdObraAsignada, "Obra asignada")
                            @Html.DropDownList("IdObraAsignada", null, "", new { @class = "span12" })
                            @Html.ValidationMessageFor(model => model.IdObraAsignada)
                        </div>
                    </div>

                    <div class="row-fluid">
                        <div class="span2 lightblue">
                            @Html.LabelFor(model => model.Administrador, "Administrador") <br />
                            @Html.RadioButtonFor(model => model.Administrador, "SI") SI
                            @Html.RadioButtonFor(model => model.Administrador, "NO") NO
                            @Html.ValidationMessageFor(model => model.Administrador)
                        </div>

                        <div class="span2 lightblue">
                            @Html.LabelFor(model => model.Activo, "Activo?") <br />
                            @Html.RadioButtonFor(model => model.Activo, "SI") SI
                            @Html.RadioButtonFor(model => model.Activo, "NO") NO
                            @Html.ValidationMessageFor(model => model.Activo)
                        </div>

                        <div class="span5 lightblue">
                            @Html.LabelFor(model => model.TipoUsuario, "Tipo de usuario") <br />
                            @Html.RadioButtonFor(model => model.TipoUsuario, 1) Propio
                            @Html.RadioButtonFor(model => model.TipoUsuario, 2) Obras propias
                            @Html.RadioButtonFor(model => model.TipoUsuario, 3) Obras ext.
                            @Html.RadioButtonFor(model => model.TipoUsuario, 4) Tercerizado
                            @Html.ValidationMessageFor(model => model.TipoUsuario)
                        </div>
                    </div>

                    <br />

                    <div class="row-fluid">
                        <div class="span3 lightblue">
                            <table id="ListaIngresoEgreso" class="scroll" cellpadding="0" cellspacing="0"></table>
                            <div id="ListaPager1" class="scroll" style="text-align: center; height: 30px"></div>
                        </div>
                        <div class="span3 lightblue">
                            <table id="ListaSectores" class="scroll" cellpadding="0" cellspacing="0"></table>
                            <div id="ListaPager2" class="scroll" style="text-align: center; height: 30px"></div>
                        </div>
                        <div class="span3 lightblue">
                            <table id="ListaJornadas" class="scroll" cellpadding="0" cellspacing="0"></table>
                            <div id="ListaPager3" class="scroll" style="text-align: center; height: 30px"></div>
                        </div>
                    </div>

                    <br />

                    <div class="row-fluid">
                        <div class="span3 lightblue">
                            <table id="ListaCuentasBancarias" class="scroll" cellpadding="0" cellspacing="0"></table>
                            <div id="ListaPager4" class="scroll" style="text-align: center; height: 30px"></div>
                        </div>
                        <div class="span3 lightblue">
                            <table id="ListaUbicaciones" class="scroll" cellpadding="0" cellspacing="0"></table>
                            <div id="ListaPager5" class="scroll" style="text-align: center; height: 30px"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div id="pie" style="position: absolute; bottom: -26px; background: rgb(236, 236, 236);
                         width: 100%; height: 68px; padding-left: 0; margin-right: 15px;">
                <hr style="margin: 0; border-top-color: #D8D4D4; border-bottom: 0px solid #ffffff;  " />
                <div class="span4 lightblue">
                    <input type="button" id="grabar2" value="Aceptar" class="btn btn-primary" />
                    @if (Model.IdEmpleado > 0)
                    { @Html.ActionLink("Eliminar", "DeleteConfirmed", new { id = Model.IdEmpleado }, new { @class = "btn  btn-default" }) }
                    @Html.ActionLink("Volver al listado", "Index", null, new { @class = "btn btn-link" })
                </div>

            </div>
        </div>
    </form>
    </div>

    <script type="text/javascript">
        $(document).ready(function () {
            'use strict';

            var $grid = "";
            var lastSelectedId;
            var lastSelectediCol;
            var lastSelectediRow;
            var lastSelectediCol2;
            var lastSelectediRow2;
            var inEdit;
            var selICol;
            var selIRow;
            var gridCellWasClicked = false;
            var grillaenfoco = false;
            var getColumnIndexByName = function (grid, columnName) {
                var cm = grid.jqGrid('getGridParam', 'colModel'), i, l = cm.length;
                for (i = 0; i < l; i++) {
                    if (cm[i].name === columnName) {
                        return i; // return the index
                    }
                }
                return -1;
            }

            $('.ui-jqgrid .ui-jqgrid-htable th div').css('white-space', 'normal');

            $.extend($.jgrid.inlineEdit, {
                keys: true
            });

            window.parent.document.body.onclick = saveEditedCell; // attach to parent window if any
            document.body.onclick = saveEditedCell; // attach to current document.
            function saveEditedCell(evt) {
                var target = $(evt.target);

                if ($grid) {
                    var isCellClicked = $grid.find(target).length; // check if click is inside jqgrid
                    if (gridCellWasClicked && !isCellClicked) // check if a valid click
                    {
                        gridCellWasClicked = false;
                        $grid.jqGrid("saveCell", lastSelectediRow2, lastSelectediCol2);
                    }
                }

                $grid = "";
                gridCellWasClicked = false;

                if (jQuery("#ListaIngresoEgreso").find(target).length) {
                    $grid = $('#ListaIngresoEgreso');
                    grillaenfoco = true;
                }
                if (jQuery("#ListaSectores").find(target).length) {
                    $grid = $('#ListaSectores');
                    grillaenfoco = true;
                }
                if (jQuery("#ListaJornadas").find(target).length) {
                    $grid = $('#ListaJornadas');
                    grillaenfoco = true;
                }
                if (jQuery("#ListaCuentasBancarias").find(target).length) {
                    $grid = $('#ListaCuentasBancarias');
                    grillaenfoco = true;
                }
                if (jQuery("#ListaUbicaciones").find(target).length) {
                    $grid = $('#ListaUbicaciones');
                    grillaenfoco = true;
                }
                if (grillaenfoco) {
                    gridCellWasClicked = true; // flat to check if there is a cell been edited.
                    lastSelectediRow2 = lastSelectediRow;
                    lastSelectediCol2 = lastSelectediCol;
                }
            };

            function EliminarSeleccionados(grid) {
                var selectedIds = grid.jqGrid('getGridParam', 'selarrrow');
                var i;
                for (i = selectedIds.length - 1; i >= 0; i--) {
                    grid.jqGrid('delRowData', selectedIds[i]);
                }
            };

            function AgregarItemVacio(grid) {
                var colModel = grid.jqGrid('getGridParam', 'colModel');
                var dataIds = grid.jqGrid('getDataIDs');
                var Id = grid.jqGrid('getGridParam', 'records') * -1;
                var data, j, cm;

                data = '{';
                for (j = 1; j < colModel.length; j++) {
                    cm = colModel[j];
                    data = data + '"' + cm.index + '":' + '"",';
                }
                data = data.substring(0, data.length - 1) + '}';
                data = data.replace(/(\r\n|\n|\r)/gm, "");
                grid.jqGrid('addRowData', Id, data);
            };

            $('#ListaIngresoEgreso').jqGrid({
                url: ROOT + 'Empleado/DetEmpleados/',
                postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
                datatype: 'json',
                mtype: 'POST',
                shrinkToFit: true,
                colNames: ['IdDetalleEmpleado', 'IdEmpleado', 'Fecha ingreso', 'Fecha egreso'],
                colModel: [
                            //{ name: 'act', index: 'act', align: 'center', width: 50, sortable: false, editable: false, search: false },
                            { name: 'IdDetalleEmpleado', index: 'IdDetalleEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                            { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                            {
                                name: 'FechaIngreso', index: 'FechaIngreso', width: 100, sortable: false, align: 'right', editable: true, label: 'TB',
                                editoptions: {
                                    size: 10,
                                    maxlengh: 10,
                                    dataInit: function (element) {
                                        $(element).datepicker({
                                            dateFormat: 'dd/mm/yy',
                                            constrainInput: false,
                                            showOn: 'button',
                                            buttonText: '...'
                                        });
                                    }
                                },
                                formatoptions: { newformat: "dd/mm/yy" }, datefmt: 'dd/mm/yy'
                            },
                            {
                                name: 'FechaEgreso', index: 'FechaEgreso', width: 100, sortable: false, align: 'right', editable: true, label: 'TB',
                                editoptions: {
                                    size: 10,
                                    maxlengh: 10,
                                    dataInit: function (element) {
                                        $(element).datepicker({
                                            dateFormat: 'dd/mm/yy',
                                            constrainInput: false,
                                            showOn: 'button',
                                            buttonText: '...'
                                        });
                                    }
                                },
                                formatoptions: { newformat: "dd/mm/yy" }, datefmt: 'dd/mm/yy'
                            }
                ],
                //onSelectRow: function (id) {
                //    if (id && id !== lastSelectedId) {
                //        if (typeof lastSelectedId !== "undefined") {
                //            jQuery("#ListaIngresoEgreso").jqGrid('restoreRow', lastSelectedId);
                //        }
                //        lastSelectedId = id;
                //    }
                //},
                //ondblClickRow: function (rowid, iRow, iCol) {
                //    var $this = $(this);
                //    $this.jqGrid('setGridParam', { cellEdit: true });
                //    $this.jqGrid('editCell', iRow, iCol, true);
                //    $this.jqGrid('setGridParam', { cellEdit: false });
                //},
                onCellSelect: function (rowid, iCol, cellcontent, e) {
                    var $this = $(this);
                    var iRow = $('#' + $.jgrid.jqID(rowid))[0].rowIndex;
                    lastSelectedId = rowid;
                    lastSelectediCol = iCol;
                    lastSelectediRow = iRow;
                    //$this.jqGrid('setGridParam', { cellEdit: true });
                    //$this.jqGrid('editCell', iRow, iCol, true);
                    //$this.jqGrid('setGridParam', { cellEdit: false });
                },
                afterEditCell: function (rowid, cellName, cellValue, iRow, iCol) {
                    if (cellName == 'FechaIngreso') {
                        jQuery("#" + iRow + "_FechaIngreso", "#ListaIngresoEgreso").datepicker({ dateFormat: "dd/mm/yy" });
                    }
                    if (cellName == 'FechaEgreso') {
                        jQuery("#" + iRow + "_FechaEgreso", "#ListaIngresoEgreso").datepicker({ dateFormat: "dd/mm/yy" });
                    }
                    //var cellDOM = this.rows[iRow].cells[iCol], oldKeydown,
                    //    $cellInput = $('input, select, textarea', cellDOM),
                    //    events = $cellInput.data('events'),
                    //    $this = $(this);
                    //if (events && events.keydown && events.keydown.length) {
                    //    oldKeydown = events.keydown[0].handler;
                    //    $cellInput.unbind('keydown', oldKeydown);
                    //    $cellInput.bind('keydown', function (e) {
                    //        $this.jqGrid('setGridParam', {cellEdit: true});
                    //        oldKeydown.call(this, e);
                    //        $this.jqGrid('setGridParam', {cellEdit: false});
                    //    }).bind('focusout', function (e) {
                    //        $this.jqGrid('setGridParam', {cellEdit: true});
                    //        $this.jqGrid('restoreCell', iRow, iCol, true);
                    //        $this.jqGrid('setGridParam', {cellEdit: false});
                    //        $(cellDOM).removeClass("ui-state-highlight");
                    //    });
                    //}
                },
                pager: $('#ListaPager1'),
                rowNum: 15,
                rowList: [10, 20, 50, 100],
                sortname: 'FechaIngreso',
                sortorder: 'asc',
                viewrecords: true,
                multiselect: true,
                width: '300',
                //height: '100%',
                altRows: false,
                footerrow: false,
                userDataOnFooter: true,
                caption: '<b>INGRESOS - EGRESOS</b>',
                cellEdit: true,
                cellsubmit: 'clientArray',
                editurl: ROOT + 'Empleado/EditGridData/'
            });
            jQuery("#ListaIngresoEgreso").jqGrid('navGrid', '#ListaPager1', { search: false, refresh: false, add: false, edit: false, del: false });
            jQuery("#ListaIngresoEgreso").jqGrid('navButtonAdd', '#ListaPager1',
                                         {
                                             caption: "", buttonicon: "ui-icon-plus", title: "Agregar",
                                             onClickButton: function () {
                                                 AgregarItemVacio(jQuery("#ListaIngresoEgreso"));
                                             },
                                         });
            jQuery("#ListaIngresoEgreso").jqGrid('navButtonAdd', '#ListaPager1',
                                         {
                                             caption: "", buttonicon: "ui-icon-trash", title: "Eliminar",
                                             onClickButton: function () {
                                                 EliminarSeleccionados(jQuery("#ListaIngresoEgreso"));
                                             },
                                         });
            //jQuery("#ListaIngresoEgreso").jqGrid('inlineNav', '#ListaPager1', { addParams: { position: "last" } });
            jQuery("#ListaIngresoEgreso").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });

            $('#ListaSectores').jqGrid({
                url: ROOT + 'Empleado/DetEmpleadosSectores/',
                postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
                datatype: 'json',
                mtype: 'POST',
                shrinkToFit: true,
                colNames: ['IdDetalleEmpleadoSector', 'IdEmpleado', 'Fecha cambio', 'Sector', 'IdSectorNuevo'],
                colModel: [
                            { name: 'IdDetalleEmpleadoSector', index: 'IdDetalleEmpleadoSector', align: 'left', width: 100, editable: false, hidden: true },
                            { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                            {
                                name: 'FechaCambio', index: 'FechaCambio', width: 100, sortable: false, align: 'right', editable: true, label: 'TB',
                                editoptions: {
                                    size: 10,
                                    maxlengh: 10,
                                    dataInit: function (element) {
                                        $(element).datepicker({
                                            dateFormat: 'dd/mm/yy',
                                            constrainInput: false,
                                            showOn: 'button',
                                            buttonText: '...'
                                        });
                                    }
                                },
                                formatoptions: { newformat: "dd/mm/yy" }, datefmt: 'dd/mm/yy'
                            },
                            {
                                name: 'Sector', index: 'Sector', align: 'left', width: 100, editable: true, hidden: false, edittype: 'select', editrules: { required: false },
                                editoptions: {
                                    dataUrl: ROOT + 'Sector/GetSectores',
                                    dataEvents: [{
                                        type: 'change', fn: function (e) {
                                            var rowid = $('#ListaSectores').getGridParam('selrow');
                                            $('#ListaSectores').jqGrid('setCell', rowid, 'IdSectorNuevo', this.value);
                                        }
                                    }]
                                },
                            },
                            { name: 'IdSectorNuevo', index: 'IdSectorNuevo', align: 'left', width: 10, editable: false, hidden: true, label: 'TB' }
                ],
                onCellSelect: function (rowid, iCol, cellcontent, e) {
                    var $this = $(this);
                    var iRow = $('#' + $.jgrid.jqID(rowid))[0].rowIndex;
                    lastSelectedId = rowid;
                    lastSelectediCol = iCol;
                    lastSelectediRow = iRow;
                },
                afterEditCell: function (id, name, val, iRow, iCol) {
                    if (name == 'FechaCambio') {
                        jQuery("#" + iRow + "_FechaCambio", "#ListaSectores").datepicker({ dateFormat: "dd/mm/yy" });
                    }
                },
                pager: $('#ListaPager2'),
                rowNum: 15,
                rowList: [10, 20, 50, 100],
                sortname: 'FechaCambio',
                sortorder: 'asc',
                viewrecords: true,
                multiselect: true,
                width: '300',
                //height: '100%',
                altRows: false,
                footerrow: false,
                userDataOnFooter: true,
                caption: '<b>CAMBIOS DE SECTORES</b>',
                cellEdit: true,
                cellsubmit: 'clientArray',
                editurl: ROOT + 'Empleado/EditGridData/'
            });
            jQuery("#ListaSectores").jqGrid('navGrid', '#ListaPager2', { search: false, refresh: false, add: false, edit: false, del: false }, {}, {}, {}, {});
            jQuery("#ListaSectores").jqGrid('navButtonAdd', '#ListaPager2',
                                         {
                                             caption: "", buttonicon: "ui-icon-plus", title: "Agregar",
                                             onClickButton: function () {
                                                 AgregarItemVacio(jQuery("#ListaSectores"));
                                             },
                                         });
            jQuery("#ListaSectores").jqGrid('navButtonAdd', '#ListaPager2',
                                         {
                                             caption: "", buttonicon: "ui-icon-trash", title: "Eliminar",
                                             onClickButton: function () {
                                                 EliminarSeleccionados(jQuery("#ListaSectores"));
                                             },
                                         });
            jQuery("#ListaSectores").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });

            $('#ListaJornadas').jqGrid({
                url: ROOT + 'Empleado/DetEmpleadosJornadas/',
                postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
                datatype: 'json',
                mtype: 'POST',
                shrinkToFit: true,
                colNames: ['IdDetalleEmpleadoJornada', 'IdEmpleado', 'Fecha de cambio', 'Hs.p/jornada'],
                colModel: [
                            { name: 'IdDetalleEmpleadoJornada', index: 'IdDetalleEmpleadoJornada', align: 'left', width: 100, editable: false, hidden: true },
                            { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                            {
                                name: 'FechaCambio1', index: 'FechaCambio', width: 100, sortable: false, align: 'right', editable: true, label: 'TB',
                                editoptions: {
                                    size: 10,
                                    maxlengh: 10,
                                    dataInit: function (element) {
                                        $(element).datepicker({
                                            dateFormat: 'dd/mm/yy',
                                            constrainInput: false,
                                            showOn: 'button',
                                            buttonText: '...'
                                        });
                                    }
                                },
                                formatoptions: { newformat: "dd/mm/yy" }, datefmt: 'dd/mm/yy'
                            },
                            {
                                name: 'HorasJornada', index: 'HorasJornada', width: 80, align: 'right', editable: true, editrules: { required: false, number: true }, edittype: 'text', label: 'TB',
                                editoptions: {
                                    maxlength: 20, defaultValue: '0.00',
                                    dataEvents: [
                                    {
                                        type: 'keypress',
                                        fn: function (e) {
                                            var key = e.charCode || e.keyCode;
                                            if (key == 13) { setTimeout("jQuery('#ListaJornadas').editCell(" + selIRow + " + 1, " + selICol + ", true);", 100); }
                                            if ((key < 48 || key > 57) && key !== 46 && key !== 44 && key !== 8 && key !== 37 && key !== 39) { return false; }
                                        }
                                    }]
                                }
                            }
                ],
                onCellSelect: function (rowid, iCol, cellcontent, e) {
                    var $this = $(this);
                    var iRow = $('#' + $.jgrid.jqID(rowid))[0].rowIndex;
                    lastSelectedId = rowid;
                    lastSelectediCol = iCol;
                    lastSelectediRow = iRow;
                },
                afterEditCell: function (id, name, val, iRow, iCol) {
                    if (name == 'FechaCambio1') {
                        jQuery("#" + iRow + "_FechaCambio1", "#ListaJornadas").datepicker({ dateFormat: "dd/mm/yy" });
                    };
                },
                afterSaveCell: function (rowid, name, val, iRow, iCol) {
                },
                pager: $('#ListaPager3'),
                rowNum: 15,
                rowList: [10, 20, 50, 100],
                sortname: 'FechaCambio1',
                sortorder: 'asc',
                viewrecords: true,
                multiselect: true,
                width: '300',
                //height: '100%',
                altRows: false,
                footerrow: false,
                userDataOnFooter: true,
                caption: '<b>JORNADAS</b>',
                cellEdit: true,
                cellsubmit: 'clientArray',
                editurl: ROOT + 'Empleado/EditGridData/'
            });
            jQuery("#ListaJornadas").jqGrid('navGrid', '#ListaPager3', { search: false, refresh: false, add: false, edit: false, del: false }, {}, {}, {}, {});
            jQuery("#ListaJornadas").jqGrid('navButtonAdd', '#ListaPager3',
                                         {
                                             caption: "", buttonicon: "ui-icon-plus", title: "Agregar",
                                             onClickButton: function () {
                                                 AgregarItemVacio(jQuery("#ListaJornadas"));
                                             },
                                         });
            jQuery("#ListaJornadas").jqGrid('navButtonAdd', '#ListaPager3',
                                         {
                                             caption: "", buttonicon: "ui-icon-trash", title: "Eliminar",
                                             onClickButton: function () {
                                                 EliminarSeleccionados(jQuery("#ListaJornadas"));
                                             },
                                         });
            jQuery("#ListaJornadas").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });

            $('#ListaCuentasBancarias').jqGrid({
                url: ROOT + 'Empleado/DetEmpleadosCuentasBancarias/',
                postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
                datatype: 'json',
                mtype: 'POST',
                shrinkToFit: true,
                colNames: ['IdDetalleEmpleadoCuentaBancaria', 'IdEmpleado', 'Banco', 'Cuenta bancaria', 'IdCuentaBancaria'],
                colModel: [
                            { name: 'IdDetalleEmpleadoCuentaBancaria', index: 'IdDetalleEmpleadoCuentaBancaria', align: 'left', width: 100, editable: false, hidden: true },
                            { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                            { name: 'Banco', index: 'Banco', align: 'left', width: 100, editable: false, search: true, searchoptions: { sopt: ['cn'] } },
                            {
                                name: 'CuentaBancaria', formoptions: { rowpos: 8, colpos: 2, label: "CuentaBancaria" }, index: 'CuentaBancaria', align: 'left', width: 100,
                                hidden: false, editable: true, edittype: 'text', editrules: { required: true },
                                editoptions: {
                                    rows: '1', cols: '1',
                                    dataInit: function (elem) {
                                        var NoResultsLabel = "No se encontraron resultados";
                                        $(elem).autocomplete({
                                            source: ROOT + 'Banco/GetCuentasBancariasAutocomplete',
                                            minLength: 0,
                                            select: function (event, ui) {
                                                if (ui.item.label === NoResultsLabel) {
                                                    event.preventDefault();
                                                    return;
                                                }
                                                event.preventDefault();
                                                $(elem).val(ui.item.label);
                                                var rowid = $('#ListaCuentasBancarias').getGridParam('selrow');
                                                $('#ListaCuentasBancarias').jqGrid('setCell', rowid, 'IdCuentaBancaria', ui.item.id);
                                                $('#ListaCuentasBancarias').jqGrid('setCell', rowid, 'Banco', ui.item.Banco);
                                            },
                                            focus: function (event, ui) {
                                                if (ui.item.label === NoResultsLabel) {
                                                    event.preventDefault();
                                                }
                                            }
                                        })
                                        .data("ui-autocomplete")._renderItem = function (ul, item) {
                                            return $("<li></li>")
                                                .data("ui-autocomplete-item", item)
                                                .append("<a><span style='display:inline-block;width:500px;font-size:12px'><b>" + item.title + "</b></span></a>")
                                                //.append("<a>" + item.value + "<br>" + item.title + "</a>")
                                                .appendTo(ul);
                                        };
                                    },
                                }
                            },
                            { name: 'IdCuentaBancaria', index: 'IdCuentaBancaria', align: 'left', width: 100, editable: false, hidden: true, label: 'TB' }
                ],
                onCellSelect: function (rowid, iCol, cellcontent, e) {
                    var $this = $(this);
                    var iRow = $('#' + $.jgrid.jqID(rowid))[0].rowIndex;
                    lastSelectedId = rowid;
                    lastSelectediCol = iCol;
                    lastSelectediRow = iRow;
                },
                pager: $('#ListaPager4'),
                rowNum: 15,
                rowList: [10, 20, 50, 100],
                sortname: 'CuentaBancaria',
                sortorder: 'asc',
                viewrecords: true,
                multiselect: true,
                width: '300',
                //height: '100%',
                altRows: false,
                footerrow: false,
                userDataOnFooter: true,
                caption: '<b>CUENTAS BANCARIAS ASIGNADAS</b>',
                cellEdit: true,
                cellsubmit: 'clientArray',
                editurl: ROOT + 'Empleado/EditGridData/'
            });
            jQuery("#ListaCuentasBancarias").jqGrid('navGrid', '#ListaPager4', { search: false, refresh: false, add: false, edit: false, del: false }, {}, {}, {}, {});
            jQuery("#ListaCuentasBancarias").jqGrid('navButtonAdd', '#ListaPager4',
                                         {
                                             caption: "", buttonicon: "ui-icon-plus", title: "Agregar",
                                             onClickButton: function () {
                                                 AgregarItemVacio(jQuery("#ListaCuentasBancarias"));
                                             },
                                         });
            jQuery("#ListaCuentasBancarias").jqGrid('navButtonAdd', '#ListaPager4',
                                         {
                                             caption: "", buttonicon: "ui-icon-trash", title: "Eliminar",
                                             onClickButton: function () {
                                                 EliminarSeleccionados(jQuery("#ListaCuentasBancarias"));
                                             },
                                         });
            jQuery("#ListaCuentasBancarias").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });

            $('#ListaUbicaciones').jqGrid({
                url: ROOT + 'Empleado/DetEmpleadosUbicaciones/',
                postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
                datatype: 'json',
                mtype: 'POST',
                shrinkToFit: true,
                colNames: ['IdDetalleEmpleadoUbicacion', 'IdEmpleado', 'Ubicacion asignada', 'IdUbicacion'],
                colModel: [
                            { name: 'IdDetalleEmpleadoUbicacion', index: 'IdDetalleEmpleadoUbicacion', align: 'left', width: 100, editable: false, hidden: true },
                            { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                            {
                                name: 'Ubicacion', index: 'Ubicacion', align: 'left', width: 100, editable: true, hidden: false, edittype: 'select', editrules: { required: false },
                                editoptions: {
                                    dataUrl: ROOT + 'Ubicacion/GetUbicaciones',
                                    dataEvents: [{
                                        type: 'change', fn: function (e) {
                                            var rowid = $('#ListaUbicaciones').getGridParam('selrow');
                                            $('#ListaUbicaciones').jqGrid('setCell', rowid, 'IdUbicacion', this.value);
                                        }
                                    }]
                                },
                            },
                            { name: 'IdUbicacion', index: 'IdUbicacion', align: 'left', width: 10, editable: false, hidden: true, label: 'TB' }
                ],
                onCellSelect: function (rowid, iCol, cellcontent, e) {
                    var $this = $(this);
                    var iRow = $('#' + $.jgrid.jqID(rowid))[0].rowIndex;
                    lastSelectedId = rowid;
                    lastSelectediCol = iCol;
                    lastSelectediRow = iRow;
                },
                pager: $('#ListaPager5'),
                rowNum: 15,
                rowList: [10, 20, 50, 100],
                sortname: 'Ubicacion',
                sortorder: 'asc',
                viewrecords: true,
                multiselect: true,
                width: '300',
                //height: '100%',
                altRows: false,
                footerrow: false,
                userDataOnFooter: true,
                caption: '<b>UBICACIONES ASIGNADAS</b>',
                cellEdit: true,
                cellsubmit: 'clientArray',
                editurl: ROOT + 'Empleado/EditGridData/'
            });
            jQuery("#ListaUbicaciones").jqGrid('navGrid', '#ListaPager5', { search: false, refresh: false, add: false, edit: false, del: false }, {}, {}, {}, {});
            jQuery("#ListaUbicaciones").jqGrid('navButtonAdd', '#ListaPager5',
                                         {
                                             caption: "", buttonicon: "ui-icon-plus", title: "Agregar",
                                             onClickButton: function () {
                                                 AgregarItemVacio(jQuery("#ListaUbicaciones"));
                                             },
                                         });
            jQuery("#ListaUbicaciones").jqGrid('navButtonAdd', '#ListaPager5',
                                         {
                                             caption: "", buttonicon: "ui-icon-trash", title: "Eliminar",
                                             onClickButton: function () {
                                                 EliminarSeleccionados(jQuery("#ListaUbicaciones"));
                                             },
                                         });
            jQuery("#ListaUbicaciones").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });
        });

        $(window).resize(function () {
            RefrescaAnchoGrillaDetalle();
            $("#conscroll").height($(window).height() - 120);
        });

        $('#grabar2').click(function () {
            var cabecera = SerializaForm();

            $('html, body').css('cursor', 'wait');
            $.ajax({
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                url: ROOT + 'Empleado/BatchUpdate',
                dataType: 'json',
                data: JSON.stringify(cabecera),
                success: function (result) {
                    if (result) {
                        $('html, body').css('cursor', 'auto');
                        if (true) {
                            window.location = (ROOT + "Empleado/Edit/" + result.IdEmpleado);
                        } else {
                            var dt = new Date();
                            var currentTime = dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds();

                            $("#textoMensajeAlerta").html("Grabado " + currentTime);
                            $("#mensajeAlerta").show();
                            $('html, body').css('cursor', 'auto');
                            $('#grabar2').attr("disabled", false).val("Aceptar y nuevo");
                        }
                    } else {
                        alert('No se pudo grabar el comprobante.');
                        $('.loading').html('');

                        $('html, body').css('cursor', 'auto');
                        $('#grabar2').attr("disabled", false).val("Aceptar y nuevo");
                    }
                },

                beforeSend: function () {
                    //$('.loading').html('some predefined loading img html');
                    $("#loading").show();
                    $('#grabar2').attr("disabled", true).val("Espere...");

                },
                complete: function () {
                    $("#loading").hide();
                }
                    ,
                error: function (xhr, textStatus, exceptionThrown) {
                    try {
                        var errorData = $.parseJSON(xhr.responseText);
                        var errorMessages = [];
                        for (var key in errorData) {
                            errorMessages.push(errorData[key]);
                        }
                        $('html, body').css('cursor', 'auto');
                        $('#grabar2').attr("disabled", false).val("Aceptar y nuevo");
                        $("#textoMensajeAlerta").html(errorData.Errors.join("<br />"));
                        $("#mensajeAlerta").show();
                        pageLayout.show('east');
                        alert(errorData.Errors.join("\n").replace(/<br\/>/g, '\n'));
                    } catch (e) {
                        $('html, body').css('cursor', 'auto');
                        $('#grabar2').attr("disabled", false).val("Aceptar y nuevo");
                        $("#textoMensajeAlerta").html(xhr.responseText);
                        $("#mensajeAlerta").show();
                    }
                }

            });
        });

        function SerializaForm() {
            var cm, colModel, dataIds, data1, data2, valor, iddeta, i, j, nuevo;
            var cabecera = $("#formid").serializeObject();

            cabecera.IdEmpleado = $("#IdEmpleado").val();
            cabecera.Legajo = $("#Legajo").val();
            cabecera.Nombre = $("#Nombre").val();
            cabecera.UsuarioNT = $("#UsuarioNT").val();
            cabecera.Password = $("#Password").val();
            cabecera.Iniciales = $("#Iniciales").val();
            cabecera.Interno = $("#Interno").val();
            cabecera.FechaNacimiento = FechaIngles($("#FechaNacimiento").val());
            cabecera.IdSector = $("#IdSector").val();
            cabecera.IdCargo = $("#IdCargo").val();
            cabecera.Email = $("#Email").val();
            cabecera.CuentaBancaria = $("#CuentaBancaria").val();
            cabecera.InformacionAuxiliar = $("#InformacionAuxiliar").val();
            cabecera.IdCuentaFondoFijo = $("#IdCuentaFondoFijo").val();
            cabecera.IdObraAsignada = $("#IdObraAsignada").val();
            cabecera.Administrador = $("#Administrador").val();
            cabecera.Activo = $("#Activo").val();
            cabecera.TipoUsuario = $("#TipoUsuario").val();

            cabecera.DetalleEmpleadosIngresosEgresos = [];
            $grid = $('#ListaIngresoEgreso');
            nuevo = -1;
            colModel = $grid.jqGrid('getGridParam', 'colModel');
            dataIds = $grid.jqGrid('getDataIDs');
            for (i = 0; i < dataIds.length; i++) {
                try {
                    data = $grid.jqGrid('getRowData', dataIds[i]);
                    iddeta = data['IdDetalleEmpleado'];
                    if (!iddeta) {
                        iddeta = nuevo;
                        nuevo--;
                    }

                    data1 = '{"IdDetalleEmpleado":"' + iddeta + '",';
                    data1 = data1 + '"IdEmpleado":"' + $("#IdEmpleado").val() + '",';
                    for (j = 0; j < colModel.length; j++) {
                        cm = colModel[j]
                        if (cm.label === 'TB') {
                            valor = data[cm.name];
                            data1 = data1 + '"' + cm.index + '":"' + valor + '",';
                        }
                    }
                    data1 = data1.substring(0, data1.length - 1) + '}';
                    data1 = data1.replace(/(\r\n|\n|\r)/gm, "");
                    data2 = JSON.parse(data1);
                    cabecera.DetalleEmpleadosIngresosEgresos.push(data2);
                }
                catch (ex) {
                    alert("SerializaForm(): No se pudo serializar el comprobante. Quizas convenga grabar todos los renglones de la jqgrid (saverow) antes de hacer el post ajax. En cuanto sacas los renglones del modo edicion, no tira más este error  " + ex);
                    return;
                }
            };

            cabecera.DetalleEmpleadosSectores = [];
            $grid = $('#ListaSectores');
            nuevo = -1;
            colModel = $grid.jqGrid('getGridParam', 'colModel');
            dataIds = $grid.jqGrid('getDataIDs');
            for (i = 0; i < dataIds.length; i++) {
                try {
                    data = $grid.jqGrid('getRowData', dataIds[i]);
                    iddeta = data['IdDetalleEmpleadoSector'];
                    if (!iddeta) {
                        iddeta = nuevo;
                        nuevo--;
                    }

                    data1 = '{"IdDetalleEmpleadoSector":"' + iddeta + '",';
                    data1 = data1 + '"IdEmpleado":"' + $("#IdEmpleado").val() + '",';
                    for (j = 0; j < colModel.length; j++) {
                        cm = colModel[j]
                        if (cm.label === 'TB') {
                            valor = data[cm.name];
                            data1 = data1 + '"' + cm.index + '":"' + valor + '",';
                        }
                    }
                    data1 = data1.substring(0, data1.length - 1) + '}';
                    data1 = data1.replace(/(\r\n|\n|\r)/gm, "");
                    data2 = JSON.parse(data1);
                    cabecera.DetalleEmpleadosSectores.push(data2);
                }
                catch (ex) {
                    alert("SerializaForm(): No se pudo serializar el comprobante. Quizas convenga grabar todos los renglones de la jqgrid (saverow) antes de hacer el post ajax. En cuanto sacas los renglones del modo edicion, no tira más este error  " + ex);
                    return;
                }
            };

            cabecera.DetalleEmpleadosJornadas = [];
            $grid = $('#ListaJornadas');
            nuevo = -1;
            colModel = $grid.jqGrid('getGridParam', 'colModel');
            dataIds = $grid.jqGrid('getDataIDs');
            for (i = 0; i < dataIds.length; i++) {
                try {
                    data = $grid.jqGrid('getRowData', dataIds[i]);
                    iddeta = data['IdDetalleEmpleadoJornada'];
                    if (!iddeta) {
                        iddeta = nuevo;
                        nuevo--;
                    }

                    data1 = '{"IdDetalleEmpleadoJornada":"' + iddeta + '",';
                    data1 = data1 + '"IdEmpleado":"' + $("#IdEmpleado").val() + '",';
                    for (j = 0; j < colModel.length; j++) {
                        cm = colModel[j]
                        if (cm.label === 'TB') {
                            valor = data[cm.name];
                            data1 = data1 + '"' + cm.index + '":"' + valor + '",';
                        }
                    }
                    data1 = data1.substring(0, data1.length - 1) + '}';
                    data1 = data1.replace(/(\r\n|\n|\r)/gm, "");
                    data2 = JSON.parse(data1);
                    cabecera.DetalleEmpleadosJornadas.push(data2);
                }
                catch (ex) {
                    alert("SerializaForm(): No se pudo serializar el comprobante. Quizas convenga grabar todos los renglones de la jqgrid (saverow) antes de hacer el post ajax. En cuanto sacas los renglones del modo edicion, no tira más este error  " + ex);
                    return;
                }
            };

            cabecera.DetalleEmpleadosCuentasBancarias = [];
            $grid = $('#ListaCuentasBancarias');
            nuevo = -1;
            colModel = $grid.jqGrid('getGridParam', 'colModel');
            dataIds = $grid.jqGrid('getDataIDs');
            for (i = 0; i < dataIds.length; i++) {
                try {
                    data = $grid.jqGrid('getRowData', dataIds[i]);
                    iddeta = data['IdDetalleEmpleadoCuentaBancaria'];
                    if (!iddeta) {
                        iddeta = nuevo;
                        nuevo--;
                    }

                    data1 = '{"IdDetalleEmpleadoCuentaBancaria":"' + iddeta + '",';
                    data1 = data1 + '"IdEmpleado":"' + $("#IdEmpleado").val() + '",';
                    for (j = 0; j < colModel.length; j++) {
                        cm = colModel[j]
                        if (cm.label === 'TB') {
                            valor = data[cm.name];
                            data1 = data1 + '"' + cm.index + '":"' + valor + '",';
                        }
                    }
                    data1 = data1.substring(0, data1.length - 1) + '}';
                    data1 = data1.replace(/(\r\n|\n|\r)/gm, "");
                    data2 = JSON.parse(data1);
                    cabecera.DetalleEmpleadosCuentasBancarias.push(data2);
                }
                catch (ex) {
                    alert("SerializaForm(): No se pudo serializar el comprobante. Quizas convenga grabar todos los renglones de la jqgrid (saverow) antes de hacer el post ajax. En cuanto sacas los renglones del modo edicion, no tira más este error  " + ex);
                    return;
                }
            };

            cabecera.DetalleEmpleadosUbicaciones = [];
            $grid = $('#ListaUbicaciones');
            nuevo = -1;
            colModel = $grid.jqGrid('getGridParam', 'colModel');
            dataIds = $grid.jqGrid('getDataIDs');
            for (i = 0; i < dataIds.length; i++) {
                try {
                    data = $grid.jqGrid('getRowData', dataIds[i]);
                    iddeta = data['IdDetalleEmpleadoUbicacion'];
                    if (!iddeta) {
                        iddeta = nuevo;
                        nuevo--;
                    }

                    data1 = '{"IdDetalleEmpleadoUbicacion":"' + iddeta + '",';
                    data1 = data1 + '"IdEmpleado":"' + $("#IdEmpleado").val() + '",';
                    for (j = 0; j < colModel.length; j++) {
                        cm = colModel[j]
                        if (cm.label === 'TB') {
                            valor = data[cm.name];
                            data1 = data1 + '"' + cm.index + '":"' + valor + '",';
                        }
                    }
                    data1 = data1.substring(0, data1.length - 1) + '}';
                    data1 = data1.replace(/(\r\n|\n|\r)/gm, "");
                    data2 = JSON.parse(data1);
                    cabecera.DetalleEmpleadosUbicaciones.push(data2);
                }
                catch (ex) {
                    alert("SerializaForm(): No se pudo serializar el comprobante. Quizas convenga grabar todos los renglones de la jqgrid (saverow) antes de hacer el post ajax. En cuanto sacas los renglones del modo edicion, no tira más este error  " + ex);
                    return;
                }
            };

            return cabecera;
        }

    </script>

