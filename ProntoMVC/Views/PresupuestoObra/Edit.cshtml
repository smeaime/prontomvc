@model ProntoMVC.Data.Models.Obra
@{
    //ViewBag.Title = "Presupuesto de Obra " + Model.NumeroObra;
}
<div><input id="Activas" name="FechaInicial" type="hidden"></div>

<br />

<div style="padding-left: 15px; padding-right: 15px;">
    Presupuesto de Obra
    <br />

    <div class="row-fluid" style="margin-bottom: 15px; margin-top: 5px;">

        <div class="span3">


            <table id="ArbolPresup" class="test link-class barrasoloenhover" style="background: transparent; font-size: 14px;
                        margin-bottom: 15px; color: Gray; overflow-y: scroll; overflow-x: hidden; background: rgb(234, 234, 234);
                        border: 0"></table>

            <div id="ArbolPresupPager" class="" style="line-height: 15px;">
            </div>
        </div>
        <div class="span9">

            <table id="Lista" class="scroll" cellpadding="0" cellspacing="0" style="font-size: 16px; "></table>
            <div id="ListaPager" class="scroll" style="text-align: center; background: ; height: 30px"></div>
        </div>
    </div>

</div>

<script type="text/javascript">

    function RefrescarArbolPresupuestoObra() {
        $('#ArbolPresup').trigger("reloadGrid");
    }


    function RecargarCookieArbolPresupuestoObra() {
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            //url: ROOT + "Home/TreeGrid_ParaGrillaNoTreeviewEnLocalStorage",
            url: ROOT + "PresupuestoObra/CargarArbol_PresupuestoObra_ParaGrillaNoTreeviewEnLocalStorage",
            data: JSON.stringify( { idObra:  @Html.Raw(Json.Encode(Model.IdObra))}),
            dataType: "json",
            success: function (data) {
                var lala = JSON.stringify(data);
                // $.cookie("arbol", lala, { path: '/' });
                localStorage.arbolPresupuestosObra = lala;
                RefrescarArbolPresupuestoObra();

            }
        });
    }


    $(document).ready(function () {
        var lastSelectedId;
        var inEdit;
        grid = $("#Lista");

        $("input[name=gr]:radio").change(function () {
            if ($("#r1").attr("checked")) {
                $("#Activas").val("SI");
            }
            else {
                $("#Activas").val("NO");
            }
            jQuery("#Lista").trigger("reloadGrid");
        })

        //Para que haga wrap en las celdas
        $('.ui-jqgrid .ui-jqgrid-htable th div').css('white-space', 'normal');


        function LlenarGrilla(id)
        {
            var mypostData = $('#Lista').jqGrid("getGridParam", "postData");
            mypostData.Nodo=id;

            $('#Lista').jqGrid('setGridParam', {postData:mypostData} ).trigger("reloadGrid");
            //delete mypostData.sess_date;
            //delete mypostData.sess_type;
            //$('#Lista').jqGrid('setGridParam', { 'Nodo': id }).trigger("reloadGrid");
        }




        $('#Lista').jqGrid({
            url: '@Url.Action("LlenarGrilla", "PresupuestoObra")',
            postData: { 'Nodo': 0 },
            datatype: 'json',
            mtype: 'POST',
            colNames: ['', 'IdObra', 'Descripcion', 'Item', 'Tipo', 'Rub', 'Un.', 'Cant. Base', 'Rendimiento', 'Incidencia', 'Precio Un.', 'Cantidad', 'Avance',
                        '|| % Distr', 'Cant Presup', 'Pre Presup', 'Imp Presup', 'Cant Real', 'Pre Pagado', 'Imp. Real', 'Certificado ||', '|| % Distr', '', '', '',
                        '', '', '', '', '', '', '', '', '',
                        '', '', '', '', '', ''],
            colModel: [
                        { name: 'ver', index: 'ver', hidden: true, width: 50 },
                        { name: 'IdObra', index: 'IdOrdenPago', align: 'center', width: 80, sortable: false, editable: false, search: false, hidden: true },
                        { name: 'Descripcion', index: 'Descripcion', align: 'left', width: 300, editable: false, search: true, searchoptions: { sopt: ['cn', 'eq'] } },
                        { name: 'NumeroObra', index: 'NumeroObra', align: 'left', width: 80, editable: false, hidden: false },
                        { name: 'TipoObraDescripcion', index: 'TipoObraDescripcion', align: 'left', width: 80, editable: false, hidden: false },
                        { name: 'Activa', index: 'Activa', align: 'center', width: 50, editable: false, hidden: false },
                        { name: 'FechaInicio', index: 'FechaInicio', width: 80, align: 'center', sorttype: 'date', hidden: false, editable: false, formatoptions: { newformat: 'dd/mm/yy' }, datefmt: 'dd/mm/yy', search: false },
                        { name: 'FechaFinalizacion', index: 'FechaFinalizacion', width: 80, align: 'center', sorttype: 'date', hidden: false, editable: false, formatoptions: { newformat: 'dd/mm/yy' }, datefmt: 'dd/mm/yy', search: false },
                        { name: 'FechaEntrega', index: 'FechaEntrega', width: 80, align: 'center', sorttype: 'date', hidden: false, editable: false, formatoptions: { newformat: 'dd/mm/yy' }, datefmt: 'dd/mm/yy', search: false },
                        { name: 'Jerarquia', index: 'Jerarquia', align: 'center', width: 120, editable: false, hidden: false },
                        { name: 'JefeRegional', index: 'JefeRegional', align: 'left', width: 120, editable: false, hidden: false },
                        { name: 'Jefe', index: 'Jefe', align: 'left', width: 120, editable: false, hidden: false },
                        { name: 'Subjefe', index: 'Subjefe', align: 'left', width: 120, editable: false, hidden: false },
                        { name: 'CuentaContableFF', index: 'CuentaContableFF', align: 'left', width: 200, editable: false, hidden: false },
                        { name: 'GrupoObra', index: 'GrupoObra', align: 'left', width: 200, editable: false, hidden: false },
                        { name: 'ArticuloAsociado', index: 'ArticuloAsociado', align: 'left', width: 300, editable: false, hidden: false },
                        { name: 'ValorObra', index: 'ValorObra', align: 'right', width: 100, editable: false, search: true, searchoptions: { sopt: ['cn'] } },
                        { name: 'Moneda', index: 'Moneda', align: 'left', width: 40, editable: false, search: true, searchoptions: { sopt: ['cn'] } },
                        { name: 'Direccion', index: 'Direccion', align: 'left', width: 200, editable: false, hidden: false },
                        { name: 'Localidad', index: 'Localidad', align: 'left', width: 200, editable: false, hidden: false },
                        { name: 'CodigoPostal', index: 'CodigoPostal', align: 'left', width: 80, editable: false, hidden: false },
                        { name: 'Provincia', index: 'Provincia', align: 'left', width: 200, editable: false, hidden: false },
                        { name: 'Pais', index: 'Pais', align: 'left', width: 120, editable: false, hidden: false },
                        { name: 'Telefono', index: 'Telefono', align: 'left', width: 120, editable: false, hidden: false },
                        { name: 'Responsable', index: 'Responsable', align: 'left', width: 120, editable: false, hidden: false },
                        { name: 'LugarPago', index: 'LugarPago', align: 'left', width: 120, editable: false, hidden: false },
                        { name: 'ProximoNumeroAutorizacionCompra', index: 'ProximoNumeroAutorizacionCompra', align: 'right', width: 80, editable: false, search: true, searchoptions: { sopt: ['cn'] } },
                        { name: 'OrdenamientoSecundario', index: 'OrdenamientoSecundario', align: 'right', width: 80, editable: false, search: true, searchoptions: { sopt: ['cn'] } },
                        { name: 'DiasLiquidacionCertificados', index: 'DiasLiquidacionCertificados', align: 'right', width: 80, editable: false, search: true, searchoptions: { sopt: ['cn'] } },
                        { name: 'Observaciones', index: 'Observaciones', align: 'left', width: 200, editable: false, hidden: false },
                        { name: 'ArchivoAdjunto1', index: 'ArchivoAdjunto1', align: 'left', width: 150, editable: false, hidden: false },
                        { name: 'ArchivoAdjunto2', index: 'ArchivoAdjunto2', align: 'left', width: 150, editable: false, hidden: false },
                        { name: 'ArchivoAdjunto3', index: 'ArchivoAdjunto3', align: 'left', width: 150, editable: false, hidden: false },
                        { name: 'ArchivoAdjunto4', index: 'ArchivoAdjunto4', align: 'left', width: 150, editable: false, hidden: false },
                        { name: 'ArchivoAdjunto5', index: 'ArchivoAdjunto5', align: 'left', width: 150, editable: false, hidden: false },
                        { name: 'ArchivoAdjunto6', index: 'ArchivoAdjunto6', align: 'left', width: 150, editable: false, hidden: false },
                        { name: 'ArchivoAdjunto7', index: 'ArchivoAdjunto7', align: 'left', width: 150, editable: false, hidden: false },
                        { name: 'ArchivoAdjunto8', index: 'ArchivoAdjunto8', align: 'left', width: 150, editable: false, hidden: false },
                        { name: 'ArchivoAdjunto9', index: 'ArchivoAdjunto9', align: 'left', width: 150, editable: false, hidden: false },
                        { name: 'ArchivoAdjunto10', index: 'ArchivoAdjunto10', align: 'left', width: 150, editable: false, hidden: false }
            ],
            onSelectRow: function (id) {
                if (id && id !== lastSelectedId) {
                    if (typeof lastSelectedId !== "undefined") {
                        grid.jqGrid('restoreRow', lastSelectedId);
                    }
                    lastSelectedId = id;
                }
            },
            pager: $('#ListaPager'),
            rowNum: 15,
            rowList: [10, 20, 50, 20000],
            sortname: 'Descripcion',
            sortorder: 'asc',
            viewrecords: true,
            width: 'auto', // 'auto',
            autowidth: true,
            shrinkToFit: false,
            height: 600, // '100%',
            altRows: false,
            footerrow: false,
            userDataOnFooter: true,
            caption: ''
        });


        jQuery("#Lista").jqGrid('navGrid', '#ListaPager', { refresh: true, add: false, edit: false, del: false }, {}, {}, {}, { sopt: ["cn"], width: 700, closeOnEscape: true, closeAfterSearch: true });
        //jQuery("#Lista").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });
        //jQuery("#Lista").jqGrid('setFrozenColumns');

        $(window).resize(function () {
            RefrescaAnchoJqgrids();
        });

        pageLayout.hide('east');
        pageLayout.hide('south');















        // http: //stackoverflow.com/questions/9192276/send-expanded-treegrid-nodes-in-cookie/9202378#9202378
        var bPersisteArbol = true; // no me anda... pinta que Oleg en su persistencia, ya tiene todos los nodos cargados, o sea
        //  que no vuelve a llamar al servidor cuando se aprieta un nodo

        var eslaprimeravez = true;


        var $grid = $('#ArbolPresup')


        // creo que la posta está por acá
        // http: //stackoverflow.com/questions/9242601/how-to-remove-flashing-on-persisting-remotely-populated-jqgrid-tree-node/9244023#9244023

        var idsOfExpandedRows = []

        if (bPersisteArbol) {

            var
                saveObjectInLocalStorage = function (storageItemName, object) {
                    if (typeof window.localStorage !== 'undefined') {
                        window.localStorage.setItem(storageItemName, JSON.stringify(object));
                    }
                },
                removeObjectFromLocalStorage = function (storageItemName) {
                    if (typeof window.localStorage !== 'undefined') {
                        window.localStorage.removeItem(storageItemName);
                    }
                },
                getObjectFromLocalStorage = function (storageItemName) {
                    if (typeof window.localStorage !== 'undefined') {
                        return JSON.parse(window.localStorage.getItem(storageItemName));
                    }
                },
                myColumnStateName = function (g) {
                    if (g[0] == undefined) return undefined;
                    // return window.location.pathname + '#' + g[0].id; // para devolver uno por pagina
                    return '#' + g[0].id;

                },
                updateIdsOfExpandedRows = function (id, isExpanded) {
                    var index = $.inArray(id, idsOfExpandedRows);
                    if (!isExpanded && index >= 0) {
                        idsOfExpandedRows.splice(index, 1); // remove id from the list
                    } else if (index < 0) {
                        idsOfExpandedRows.push(id);
                    }
                    saveObjectInLocalStorage(myColumnStateName($grid), idsOfExpandedRows);
                },
                orgExpandRow = $.fn.jqGrid.expandRow,
                orgCollapseRow = $.fn.jqGrid.collapseRow;

            if ($grid[0] != undefined) {
                idsOfExpandedRows = getObjectFromLocalStorage(myColumnStateName($grid)) || [];
            }

        }





        // pruebas para árbol usando cookie
        // con cookies no va. probar usando localstorage http://www.w3schools.com/html/html5_webstorage.asp

        //if ($.cookie("arbol") == null) {
        //    RecargarCookieArbol();
        //}

        if (localStorage.arbolPresupuestosObra == null || true) {
            RecargarCookieArbolPresupuestoObra();
        }




        // http://stackoverflow.com/questions/7330572/sorting-of-jqgrid-v4-1-2-treegrid-not-working-with-ajacency-model/7332627#7332627

        if (localStorage.arbolPresupuestosObra != null) {


            var mydata = [
        { id: "1", name: "Cash", num: "100", debit: "400.00", credit: "250.00", balance: "150.00", enbl: "1", level: "0", parent: "null", isLeaf: false, expanded: false, loaded: true },
        { id: "2", name: "Cash 1", num: "1", debit: "300.00", credit: "200.00", balance: "100.00", enbl: "0", level: "1", parent: "1", isLeaf: false, expanded: false, loaded: true },
        { id: "3", name: "Sub Cash 1", num: "1", debit: "300.00", credit: "200.00", balance: "100.00", enbl: "1", level: "2", parent: "2", isLeaf: true, expanded: false, loaded: true },
        { id: "4", name: "Cash 2", num: "2", debit: "100.00", credit: "50.00", balance: "50.00", enbl: "0", level: "1", parent: "1", isLeaf: true, expanded: false, loaded: true },
        { id: "5", name: "Bank\'s", num: "200", debit: "1500.00", credit: "1000.00", balance: "500.00", enbl: "1", level: "0", parent: "null", isLeaf: false, expanded: true, loaded: true },
        { id: "6", name: "Bank 1", num: "1", debit: "500.00", credit: "0.00", balance: "500.00", enbl: "0", level: "1", parent: "5", isLeaf: true, expanded: false, loaded: true },
        { id: "7", name: "Bank 2", num: "2", debit: "1000.00", credit: "1000.00", balance: "0.00", enbl: "1", level: "1", parent: "5", isLeaf: true, expanded: false, loaded: true },
        { id: "8", name: "Fixed asset", num: "300", debit: "0.00", credit: "1000.00", balance: "-1000.00", enbl: "0", level: "0", parent: "null", isLeaf: true, expanded: false, loaded: true }
            ],
    grid = $('#ArbolPresup')

            $.jgrid.formatter.integer.thousandsSeparator = ',';
            $.jgrid.formatter.number.thousandsSeparator = ',';
            $.jgrid.formatter.currency.thousandsSeparator = ',';
            grid.jqGrid({
                //postData: { 'idObra':  77 },  //tml.Raw(Json.Encode(Model.IdObra))

                datatype: "jsonstring",
                // datastr: mydata,
                datastr: JSON.parse(localStorage.arbolPresupuestosObra).rows,
                colNames: [/*"Id", */"" , "Acc Num" /*, "Debit" , "Credit", "Balance", "Enabled"*/],
                colModel: [
                    //{name: 'id', index: 'id', width: 1, hidden: true, key: true},
                    { name: 'descr', index: 'descr', width: 250 },
                    // { name: 'IdItem', index: 'IdItem', width: 80, formatter: 'integer', sorttype: 'int', align: 'center' },
                    { name: 'Link', index: 'Link', width: 80, formatter: 'number', sorttype: 'number', align: 'right', hidden: true },
                    //{ name: 'credit', index: 'credit', width: 80, formatter: 'number', sorttype: 'number', align: 'right' },
                    //{ name: 'balance', index: 'balance', width: 80, formatter: 'number', sorttype: 'number', align: 'right' },
                    //{
                    //    name: 'enbl', index: 'enbl', width: 60, align: 'center',
                    //    formatter: 'checkbox', editoptions: { value: '1:0' },
                    //    formatoptions: { disabled: false }
                    //}
                ],

                onSelectRow: function(rowId) {
                    //ondblClickRow: function (rowId) {
                    LlenarGrilla(rowId);
                    //alert(rowId);

                    //var rowData = jQuery(this).getRowData(rowId);
                    //var jobNumber = rowData['jobNumber'];
                    //var jobName = rowData['description'];
                    //var jobCustomer = rowData['customerName'];
                    //var jobStatus = rowData['jobStatus'];
                    //jobName = jobName.replace(/&/g, "``");
                    //jobName = jobName.replace(/#/, "__");
                    //var aQryStr = "jobNumber=" + jobNumber + "&jobName=" + jobName + "&jobCustomer=" + jobCustomer;
                    //console.log("./jobflow?token=view&" + aQryStr);
                    //document.location.href = "./jobflow?token=view&" + aQryStr;
                },

                height: 600, //'auto',
                gridview: true,
                rowNum: 10000,
                //sortname: 'id',
                treeGrid: true,
                treeGridModel: 'adjacency',
                treedatatype: "local",
                ExpandColumn: 'descr',
                loadui: 'disable', // es la unica manera q encontré de sacar el cartelote "loading" q no se iba
                //caption: "Demonstrate how to use Tree Grid for the Adjacency Set Model",
                jsonReader: {
                    repeatitems: false,
                    root: function (obj) { return obj; },
                    page: function () { return 1; },
                    total: function () { return 1; },
                    records: function (obj) { return obj.length; }
                }
            });




            //$('#ArbolPresup').jqGrid({
            //    datastr: mydataOleg,
            //    //  data: JSON.parse(localStorage.arbolPresupuestosObra).rows,
            //    datatype: "jsonstring", // "local",  //http://stackoverflow.com/questions/6831306/load-local-json-data-in-jqgrid-without-addjsonrows

            //    /*
            //    colModel: [
            //        { name: "id", width: 1 },
            //        { name: "descr", index: 'descr', width: 400, searchoptions: { sopt: ['cn', 'eq'] } },
            //        { name: "Name2", width: 1, hidden: true },
            //        { name: "Name3", width: 1, hidden: true },
            //        { name: "Name4", width: 1, hidden: true },
            //        { name: "Name5", width: 1, hidden: true },
            //    ],
            //    */

            //    colNames: ["Id", "Account", "Acc Num", "Debit", "Credit", "Balance", "Enabled"],
            //    colModel: [
            //        { name: 'id', index: 'id', width: 1, hidden: true, key: true },
            //        { name: 'name', index: 'name', width: 180 },
            //        { name: 'num', index: 'acc_num', width: 80, align: "center" },
            //        { name: 'debit', index: 'debit', width: 80, align: "right" },
            //        { name: 'credit', index: 'credit', width: 80, align: "right" },
            //        { name: 'balance', index: 'balance', width: 80, align: "right" },
            //        {
            //            name: 'enbl', index: 'enbl', width: 60, align: 'center',
            //            formatter: 'checkbox', editoptions: { value: '1:0' },
            //            formatoptions: { disabled: false }
            //        }
            //    ],



            //    ignoreCase: true,

            //    loadComplete: function (data) {
            //      /*
            //        if (eslaprimeravez) {
            //            cargarTopPositionDelArbol();
            //            eslaprimeravez = false;
            //        }

            //        var gridId = $grid.attr('id');
            //        var gridParentWidth = $('#gbox_' + gridId).parent().width();
            //        $('#' + gridId).setGridWidth(gridParentWidth);
            //        */
            //    },

            //    /*
            //    // pager: "#addtree2Pager",
            //    rowNum: 500,
            //    //rowList: [1, 2, 10],
            //    viewrecords: true,
            //    height: "auto",
            //    //autoencode: true,
            //    //gridview: true,
            //    //ignoreCase: true,

            //    //treeGrid: true,
            //    caption: ""
            //    */


            //    height: 'auto',
            //gridview: true,
            //rowNum: 10000,
            //sortname: 'id',
            //treeGrid: true,
            //treeGridModel: 'adjacency',
            //treedatatype: "local",
            //ExpandColumn: 'descr',
            ////caption: "",
            //jsonReader: {
            //    repeatitems: false,
            //    root: function (obj) { return obj; },
            //    page: function (obj) { return 1; },
            //    total: function (obj) { return 1; },
            //    records: function (obj) { return obj.length; }
            //}



            //});

            //$('#ArbolPresup').filterToolbar({
            //    stringResult: true, searchOnEnter: true,
            //    defaultSearch: 'cn',
            //    enableClear: false
            //});

            RefrescarArbolPresupuestoObra();



        }






        ////////////////


        if (bPersisteArbol) {




            $grid.jqGrid('navButtonAdd', '#paddtree', {
                caption: "",
                buttonicon: "ui-icon-closethick",
                title: "Clear saved grid's settings",
                onClickButton: function () {
                    removeObjectFromLocalStorage(myColumnStateName($(this)));
                    window.location.reload();
                }
            });
            $.jgrid.extend({
                expandRow: function (rc) {
                    //alert('before expandNode: rowid="' + rc._id_ + '", name="' + rc.name + '"');
                    updateIdsOfExpandedRows(rc._id_, true);
                    return orgExpandRow.call(this, rc);
                },
                collapseRow: function (rc) {
                    //alert('before collapseNode: rowid="' + rc._id_ + '", name="' + rc.name + '"');
                    updateIdsOfExpandedRows(rc._id_, false);
                    return orgCollapseRow.call(this, rc);
                }
            });
        }






        ///////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////


    });


</script>
