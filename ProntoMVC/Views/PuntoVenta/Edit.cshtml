@model ProntoMVC.Data.Models.PuntosVenta
@{
    ViewBag.Title = "Edit";
}
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

    
    <div class="container-fluid">
        <form class="form-horizontal">
        <legend>Punto de venta</legend>
        @Html.HiddenFor(model => model.IdPuntoVenta)
        @* <div>@Html.Hidden("IdPuntosVenta", Model.IdPuntosVenta)</div>


        <div>@Html.Hidden("Cumplido", Model.Cumplido)</div>
        <div>@Html.Hidden("FechaAnulacion", Model.FechaAnulacion)</div>
        <div>@Html.Hidden("UsuarioAnulacion", Model.UsuarioAnulacion)</div>
        <div>@Html.Hidden("MotivoAnulacion", Model.MotivoAnulacion)</div>*@
        <div class="row-fluid">
            <div class="row-fluid">
                <div class="span2 lightblue">
                    @Html.LabelFor(model => model.Letra, "Letra")
                    @Html.TextBoxFor(model => model.Letra, new { @class = "span12" })
                    @Html.ValidationMessageFor(model => model.Letra)
                </div>
                <div class="span4 lightblue">
                    @Html.LabelFor(model => model.PuntoVenta, "Punto de venta")
                    @Html.TextBoxFor(model => model.PuntoVenta, new { @class = "span12" })
                    @Html.ValidationMessageFor(model => model.PuntoVenta)
                </div>
            </div>
            <div class="row-fluid">
                <div class="span4 lightblue">
                    <div class="row-fluid">
                        @Html.LabelFor(model => model.Descripcion, "Descripcion")
                        @Html.TextBoxFor(model => model.Descripcion, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.Descripcion)
                        @*-------------------------------------------------------------------------------*@
                        @*-------------------------------------------------------------------------------*@
                        @Html.LabelFor(model => model.TiposComprobante, "Tipo de comprobante")
                        @Html.DropDownList("IdTipoComprobante", String.Empty)
                        @Html.ValidationMessageFor(model => model.ProximoNumero)
                        @*  @Html.DropDownListFor(
                            x => x.IdTipoComprobante, 
                            new SelectList(Model.TiposComprobante ,  "IdTipoComprobante", "Descripcion")
                    )*@ @*-------------------------------------------------------------------------------*@
                        @*-------------------------------------------------------------------------------*@
                        @*http://twitter.github.com/bootstrap/scaffolding.html#fluidGridSystem*@
                        @Html.LabelFor(model => model.ProximoNumero, "Proximo Numero")
                        @Html.TextBoxFor(model => model.ProximoNumero, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.ProximoNumero)
                        @*-------------------------------------------------------------------------------*@
                        @*-------------------------------------------------------------------------------*@
                        @* @Html.CheckBoxFor(m => m.SomeBooleanProperty, new { checked = "checked" });*@
                        @*http://stackoverflow.com/questions/12674572/proper-usage-of-net-mvc-html-checkboxfor*@
                        @*@Html.CheckBox("templateId", true, new { @class = "" })*@
                        @Html.LabelFor(model => model.Activo, "Activo")
                        @Html.RadioButtonFor(model => model.Activo, "SI") SI
                        @Html.RadioButtonFor(model => model.Activo, "NO") NO
                    </div>
                </div>
                <div class="span4 lightblue">
                    @Html.LabelFor(model => model.CAEManual, "Tipo de registro")
                    @Html.RadioButtonFor(model => model.WebService, "") Normal<br />
                    @Html.RadioButtonFor(model => model.WebService, "WSFE") Registro Webservice (WSFE)<br />
                    @Html.RadioButtonFor(model => model.WebService, "WSFEv1") Registro Webservice (WSFEv1)<br />
                    @Html.RadioButtonFor(model => model.WebService, "WSBFE") Registro Webservice (WSBFE)<br />
                    @Html.RadioButtonFor(model => model.WebService, "WSFEx") Registro Webservice (WSFEx)<br />
                    @Html.RadioButtonFor(model => model.WebService, " ") Carga manual de CAE<br />




                    @* si pone WSFEx, hay que poner WebServiceModoTest en SI si pone Carga Manual, hay que poner CAEManual en SI*@
                </div>
                <!--/span-->
            </div>
        </div>
        <!--/row-->
        <div class="row-fluid">
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.NumeroCAI_R_A, "Numero CAI remitos")
                @Html.TextBoxFor(model => model.NumeroCAI_R_A, new { @class = "span12" })
                @Html.ValidationMessageFor(model => model.NumeroCAI_R_A)
            </div>
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.FechaCAI_R_A, "Fecha de vencimiento")
                @Html.TextBoxFor(model => model.FechaCAI_R_A, new Dictionary<string, object> { { "class", "span12" }, { "placeholder", "dd/mm/yyyy" } })
                @Html.ValidationMessageFor(model => model.FechaCAI_R_A)
                <script type="text/jscript">
                    $("#FechaCAI_R_A").datepicker({
                        changeMonth: true,
                        changeYear: true,
                        dateFormat: 'dd/mm/yy'
                        //numberOfMonths: 2,
                    });
                </script>
            </div>
        </div>
        <div class="row-fluid">
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.NumeroCAI_F_A, "Numero CAI facturas A")
                @Html.TextBoxFor(model => model.NumeroCAI_F_A, new { @class = "span12" })
                @Html.ValidationMessageFor(model => model.NumeroCAI_F_A)
            </div>
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.FechaCAI_F_A, "Fecha de vencimiento")
                @Html.TextBoxFor(model => model.FechaCAI_F_A, new Dictionary<string, object> { { "class", "span12" }, { "placeholder", "dd/mm/yyyy" } })
                @Html.ValidationMessageFor(model => model.FechaCAI_F_A)
                <script type="text/jscript">
                    $("#FechaCAI_F_A").datepicker({
                        changeMonth: true,
                        changeYear: true,
                        dateFormat: 'dd/mm/yy'
                        //numberOfMonths: 2,
                    });
                </script>
            </div>
        </div>
        <div class="row-fluid">
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.NumeroCAI_C_A, "Numero CAI notas credito A")
                @Html.TextBoxFor(model => model.NumeroCAI_C_A, new { @class = "span12" })
                @Html.ValidationMessageFor(model => model.NumeroCAI_C_A)
            </div>
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.FechaCAI_C_A, "Fecha de vencimiento")
                @Html.TextBoxFor(model => model.FechaCAI_C_A, new Dictionary<string, object> { { "class", "span12" }, { "placeholder", "dd/mm/yyyy" } })
                @Html.ValidationMessageFor(model => model.FechaCAI_C_A)
                <script type="text/jscript">
                    $("#FechaCAI_C_A").datepicker({
                        changeMonth: true,
                        changeYear: true,
                        dateFormat: 'dd/mm/yy'
                        //numberOfMonths: 2,
                    });
                </script>
            </div>
        </div>
        <div class="row-fluid">
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.NumeroCAI_D_A, "Numero CAI notas debito A")
                @Html.TextBoxFor(model => model.NumeroCAI_D_A, new { @class = "span12" })
                @Html.ValidationMessageFor(model => model.NumeroCAI_D_A)
            </div>
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.FechaCAI_D_A, "Fecha de vencimiento")
                @Html.TextBoxFor(model => model.FechaCAI_D_A, new Dictionary<string, object> { { "class", "span12" }, { "placeholder", "dd/mm/yyyy" } })
                @Html.ValidationMessageFor(model => model.FechaCAI_D_A)
                <script type="text/jscript">
                    $("#FechaCAI_D_A").datepicker({
                        changeMonth: true,
                        changeYear: true,
                        dateFormat: 'dd/mm/yy'
                    });
                </script>
            </div>
        </div>
        <div class="row-fluid">
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.NumeroCAI_F_B, "Numero CAI facturas B")
                @Html.TextBoxFor(model => model.NumeroCAI_F_B, new { @class = "span12" })
                @Html.ValidationMessageFor(model => model.NumeroCAI_F_B)
            </div>
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.FechaCAI_F_B, "Fecha de vencimiento")
                @Html.TextBoxFor(model => model.FechaCAI_F_B, new Dictionary<string, object> { { "class", "span12" }, { "placeholder", "dd/mm/yyyy" } })
                @Html.ValidationMessageFor(model => model.FechaCAI_F_B)
                <script type="text/jscript">
                    $("#FechaCAI_F_B").datepicker({
                        changeMonth: true,
                        changeYear: true,
                        dateFormat: 'dd/mm/yy'
                        //numberOfMonths: 2,
                    });
                </script>
            </div>
        </div>
        <div class="row-fluid">
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.NumeroCAI_C_B, "Numero CAI notas credito B")
                @Html.TextBoxFor(model => model.NumeroCAI_C_B, new { @class = "span12" })
                @Html.ValidationMessageFor(model => model.NumeroCAI_C_B)
            </div>
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.FechaCAI_C_B, "Fecha de vencimiento")
                @Html.TextBoxFor(model => model.FechaCAI_C_B, new Dictionary<string, object> { { "class", "span12" }, { "placeholder", "dd/mm/yyyy" } })
                @Html.ValidationMessageFor(model => model.FechaCAI_C_B)
                <script type="text/jscript">
                    $("#FechaCAI_C_B").datepicker({
                        changeMonth: true,
                        changeYear: true,
                        dateFormat: 'dd/mm/yy'
                        //numberOfMonths: 2,
                    });
                </script>
            </div>
        </div>
        <div class="row-fluid">
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.NumeroCAI_D_B, "Numero CAI notas debito B")
                @Html.TextBoxFor(model => model.NumeroCAI_D_B, new { @class = "span12" })
                @Html.ValidationMessageFor(model => model.NumeroCAI_D_B)
            </div>
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.FechaCAI_D_B, "Fecha de vencimiento")
                @Html.TextBoxFor(model => model.FechaCAI_D_B, new Dictionary<string, object> { { "class", "span12" }, { "placeholder", "dd/mm/yyyy" } })
                @Html.ValidationMessageFor(model => model.FechaCAI_D_B)
                <script type="text/jscript">
                    $("#FechaCAI_D_B").datepicker({
                        changeMonth: true,
                        changeYear: true,
                        dateFormat: 'dd/mm/yy'
                        //numberOfMonths: 2,
                    });
                </script>
            </div>
        </div>
        <div class="row-fluid">
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.NumeroCAI_F_E, "Numero CAI facturas E")
                @Html.TextBoxFor(model => model.NumeroCAI_F_E, new { @class = "span12" })
                @Html.ValidationMessageFor(model => model.NumeroCAI_F_E)
            </div>
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.FechaCAI_F_E, "Fecha de vencimiento")
                @Html.TextBoxFor(model => model.FechaCAI_F_E, new Dictionary<string, object> { { "class", "span12" }, { "placeholder", "dd/mm/yyyy" } })
                @Html.ValidationMessageFor(model => model.FechaCAI_F_E)
                <script type="text/jscript">
                    $("#FechaCAI_F_E").datepicker({
                        changeMonth: true,
                        changeYear: true,
                        dateFormat: 'dd/mm/yy'
                        //numberOfMonths: 2,
                    });
                </script>
            </div>
        </div>
        <div class="row-fluid">
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.NumeroCAI_C_E, "Numero CAI notas credito E")
                @Html.TextBoxFor(model => model.NumeroCAI_C_E, new { @class = "span12" })
                @Html.ValidationMessageFor(model => model.NumeroCAI_C_E)
            </div>
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.FechaCAI_C_E, "Fecha de vencimiento")
                @Html.TextBoxFor(model => model.FechaCAI_C_E, new Dictionary<string, object> { { "class", "span12" }, { "placeholder", "dd/mm/yyyy" } })
                @Html.ValidationMessageFor(model => model.FechaCAI_C_E)
                <script type="text/jscript">
                    $("#FechaCAI_C_E").datepicker({
                        changeMonth: true,
                        changeYear: true,
                        dateFormat: 'dd/mm/yy'
                        //numberOfMonths: 2,
                    });
                </script>
            </div>
        </div>
        <div class="row-fluid">
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.NumeroCAI_D_E, "Numero CAI notas debito E")
                @Html.TextBoxFor(model => model.NumeroCAI_D_E, new { @class = "span12" })
                @Html.ValidationMessageFor(model => model.NumeroCAI_D_E)
            </div>
            <div class="span2 lightblue">
                @Html.LabelFor(model => model.FechaCAI_D_E, "Fecha de vencimiento")
                @Html.TextBoxFor(model => model.FechaCAI_D_E, new Dictionary<string, object> { { "class", "span12" }, { "placeholder", "dd/mm/yyyy" } })
                @Html.ValidationMessageFor(model => model.FechaCAI_D_E)
                <script type="text/jscript">
                    $("#FechaCAI_D_E").datepicker({
                        changeMonth: true,
                        changeYear: true,
                        dateFormat: 'dd/mm/yy'
                        //numberOfMonths: 2,
                    });
                </script>
            </div>
        </div>
        <div id="RManulada" class="row-fluid" style="display: none; font-weight: bold; background-color: red">
        </div>
        <br />
        <br />
        <br />
        <input type="submit" id="Guardar" value="Aceptar" class="btn btn-primary" />
        @if (Model.IdPuntoVenta > 0)
        { @*@Html.ActionLink("Borrar", "DeleteConfirmedDirecto", new { id = Model.IdPuntoVenta }) *@
            <input type="button" id="Borrar" value="Borrar" class="btn btn-link" />
        }
        <script>

               $(document).ready(function () {
                    $("#Borrar").click(function() {
                        // $('#dialog-confirm').data('Combo', 'Aprobo');
                        $('#dialog-confirm').dialog('open'); 
                    });
            
                    $( "#dialog-confirm" ).dialog({
                        title: "Confirmar",
                        content: "Quiere borrar el item?",
                        type: "confirm",
                        buttons: [{ value: "Sí" }, { value: "No"}],
                        success: function (result) {
                            if (result == "Sí") {
                                // alert("One cup of coffee coming right up!");
                                $.ajax({
                                    url: @Url.Action("Borrar", "DeleteConfirmedDirecto") ,
                                    success: function (data) {                            }
                                });
                            }
                        }
                    });
            
                });
        </script>
        @Html.ActionLink("Volver al listado", "Index")
        @*<div>@Html.ActionLink("Ir a lista de PuntosVentas", "Index")</div>*@ @*<input type="file" id="file-id" name="file_name" onchange="theimage()"/>
            <input type="text" name="file_path" id="file-path"/>*@
    </div>

    <script type="text/javascript">
        //    function theimage(){
        //     var filename = document.getElementById('file-id').value;
        //     document.getElementById('file-path').value = filename;
        //     var filename1 = $('#file-id').next().val();
        //     alert(filename);
        //    }

        $(document).ready(function () {

            $("#FechaPuntosVenta").datepicker({
                changeMonth: true,
                changeYear: true
                //numberOfMonths: 2,
            });

            //Para que haga wrap en las celdas
            $('.ui-jqgrid .ui-jqgrid-htable th div').css('white-space', 'normal');
            //$.jgrid.formatter.integer.thousandsSeparator=',';




        });

        Aprobado();

        function Aprobado() {
            if ($('#Aprobo').val() != "") {
                $("#chk0").attr('checked', true);
                var Aprobo = $("#Aprobo > option:selected").html();
                $("#chk0").attr('title', Aprobo);
            }
            else {
                $("#chk0").attr('checked', false);
                $("#chk0").attr('title', "");
            }
        }

        function pickdates(id) {
            jQuery("#" + id + "_sdate", "#Lista").datepicker({ dateFormat: "yy-mm-dd" });
        }

        function formEdit() {
            $('input[name=rdEditApproach]').attr('disabled', true);
            $('#Lista').navGrid(
                '#Lista',
            //enabling buttons
                {add: true, del: true, edit: true, search: false },
            //edit option
                {width: 'auto' },
            //add options
                {width: 'auto', url: '/Home/AddProduct/' },
            //delete options
                {url: '/Home/DeleteProduct/' });
        };

        calculateTotal = function () {
            var totalCantidad = grid.jqGrid('getCol', 'Cantidad', false, 'sum')
            grid.jqGrid('footerData', 'set', { NumeroItem: 'TOTAL', Cantidad: totalCantidad });
        };

        getColumnIndexByName = function (grid, columnName) {
            var cm = grid.jqGrid('getGridParam', 'colModel'), i, l = cm.length;
            for (i = 0; i < l; i++) {
                if (cm[i].name === columnName) {
                    return i; // return the index
                }
            }
            return -1;
        },

        // Para usar en la edicion de una fila afterSubmit:processAddEdit,
    function processAddEdit(response, postdata) {
        var success = true;
        var message = ""
        var json = eval('(' + response.responseText + ')');
        if (json.errors) {
            success = false;
            for (i = 0; i < json.errors.length; i++) {
                message += json.errors[i] + '<br/>';
            }
        }
        var new_id = "1";
        return [success, message, new_id];
    }

        if ($("#IdPuntosVenta").val() <= 0) {
            $("#anular").attr('disabled', 'disabled');
        }
        else {
        }

        if ($("#Cumplido").val() == "AN") {
            $(":input").attr("disabled", "disabled");
            $("#RManulada").html("RM ANULADA el " + $("#FechaAnulacion").val() + ", Motivo : " + $("#MotivoAnulacion").val() + ", Usuario : " + $("#UsuarioAnulacion").val());
            $("#RManulada").show();
        }

        function ConectarGrillas1() {
            // connect grid1 with grid2
            $("#ListaDrag").jqGrid('gridDnD', {
                connectWith: '#Lista', //drag_opts:{stop:null},
                onstart: function (ev, ui) {
                    ui.helper.removeClass("ui-state-highlight myAltRowClass")
                        .addClass("ui-state-error ui-widget")
                        .css({ border: "5px ridge tomato" });
                    $("#gbox_grid2").css("border", "3px solid #aaaaaa");
                },
                beforedrop: function (ev, ui, getdata, $source, $target) {
                    //                var names = $target.jqGrid('getCol', 'name2');
                    //                if ($.inArray(getdata.name2, names) >= 0) {
                    //                    // prevent data for dropping
                    //                    ui.helper.dropped = false;
                    //                    alert("The row is already in the destination grid");
                    //                }
                },
                ondrop: function (ev, ui, getdata) {
                    var acceptId = $(ui.draggable).attr("id");
                    var getdata = ui.draggable.parent().parent().jqGrid('getRowData', acceptId);
                    var j = 0, tmpdata = {}, dropname;
                    var dropmodel = $("#" + this.id).jqGrid('getGridParam', 'colModel');
                    try {
                        //					for (var key in getdata) {
                        //						if(getdata.hasOwnProperty(key) && dropmodel[j]) {
                        //							dropname = dropmodel[j].name;
                        //							tmpdata[dropname] = getdata[key];
                        //						}
                        //						j++;
                        //					}
                        tmpdata['IdArticulo'] = getdata['IdArticulo'];
                        tmpdata['Codigo'] = getdata['Codigo'];
                        tmpdata['Descripcion'] = getdata['Descripcion'];
                        tmpdata['IdUnidad'] = getdata['IdUnidad'];
                        tmpdata['Unidad'] = getdata['Unidad'];
                        tmpdata['IdDetallePuntosVenta'] = 0;
                        tmpdata['Cantidad'] = 1;
                        tmpdata['NumeroItem'] = jQuery("#Lista").jqGrid('getGridParam', 'records') + 1;
                        getdata = tmpdata;
                    } catch (e) { }
                    var grid;
                    grid = Math.ceil(Math.random() * 1000000);
                    // SE CAMBIO EN EL COMPONENTE grid.jqueryui.js LA LINEA 435 (SE COMENTO LA INSTRUCCION addRowData)
                    $("#" + this.id).jqGrid('addRowData', grid, getdata);
                    //resetAltRows.call(this);
                    $("#gbox_grid2").css("border", "1px solid #aaaaaa");
                }
            });
        }

        function ConectarGrillas2() {
            $("#ListaDrag2").jqGrid('gridDnD', {
                connectWith: '#Lista',
                onstart: function (ev, ui) {
                    ui.helper.removeClass("ui-state-highlight myAltRowClass")
                        .addClass("ui-state-error ui-widget")
                        .css({ border: "5px ridge tomato" });
                    $("#gbox_grid2").css("border", "3px solid #aaaaaa");
                },
                ondrop: function (ev, ui, getdata) {
                    var acceptId = $(ui.draggable).attr("id");
                    var getdata = ui.draggable.parent().parent().jqGrid('getRowData', acceptId);
                    var j = 0, tmpdata = {}, dropname, IdPuntosVenta;
                    var dropmodel = $("#" + this.id).jqGrid('getGridParam', 'colModel');
                    var grid;
                    try {
                        $("#Observaciones").val(getdata['Observaciones']);
                        $("#LugarEntrega").val(getdata['LugarEntrega']);
                        $("#IdObra").val(getdata['IdObra']);
                        $("#IdSector").val(getdata['IdSector']);

                        IdPuntosVenta = getdata['IdPuntosVenta'];
                        $.ajax({
                            type: "GET",
                            contentType: "application/json; charset=utf-8",
                            url: ROOT + 'PuntosVenta/DetPuntosVentasSinFormato/',
                            data: { IdPuntosVenta: IdPuntosVenta },
                            dataType: "Json",
                            success: function (data) {
                                var longitud = data.length;
                                for (var i = 0; i < data.length; i++) {
                                    tmpdata['IdArticulo'] = data[i].IdArticulo;
                                    tmpdata['Codigo'] = data[i].Codigo;
                                    tmpdata['Descripcion'] = data[i].Descripcion;
                                    tmpdata['IdUnidad'] = data[i].IdUnidad;
                                    tmpdata['Unidad'] = data[i].Unidad;
                                    tmpdata['IdDetallePuntosVenta'] = 0;
                                    tmpdata['Cantidad'] = 1;
                                    tmpdata['NumeroItem'] = jQuery("#Lista").jqGrid('getGridParam', 'records') + 1;
                                    getdata = tmpdata;
                                    grid = Math.ceil(Math.random() * 1000000);
                                    $("#Lista").jqGrid('addRowData', grid, getdata);
                                }
                            }
                        });
                    } catch (e) { }
                    $("#gbox_grid2").css("border", "1px solid #aaaaaa");
                }
            });
        }

        //    function supplierFormatter(cellvalue, options, rowObject) {
        //        return "<a href='' onclick='showSupplierDialog(this, " + cellvalue.substr(1, cellvalue.indexOf(']') - 1) + "); return false;'>" + cellvalue.substr(cellvalue.indexOf(']') + 2) + "</a>";
        //    };

        //    function supplierUnFormatter(cellvalue, options, cellobject) {
        //        return cellvalue;
        //    }

        //    function showSupplierDialog(linkElement, supplierId) {
        //        //request json data
        //        $.getJSON('/Home/SupplierData/', { supplierId: supplierId }, function (data) {
        //            //set values in dialog
        //            $('#sCompanyName').text(data.companyName);
        //            $('#sAddress').text(data.address);
        //            $('#sPostalCode').text(data.postalCode);
        //            $('#sCity').text(data.city);
        //            $('#sCountry').text(data.country);
        //            $('#sPhone').text(data.phone);
        //            $('#sHomePage').text(data.homePage);
        //            //get link position
        //            var linkPosition = $(linkElement).offset();
        //            //set dialog position
        //            $('#jqdlgSupplier').dialog('option', 'position', [linkPosition.left, linkPosition.top]);
        //            //open dialog
        //            $('#jqdlgSupplier').dialog('open');
        //        });
        //    };
    </script>
    
    
}
