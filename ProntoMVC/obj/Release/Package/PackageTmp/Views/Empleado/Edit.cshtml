@model ProntoMVC.Data.Models.Empleado

@{
    ViewBag.Title = "Edit";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <div class="container-fluid">
            <legend>Empleado</legend>
            <div class="row-fluid">
                <div>
                    @Html.Hidden("IdEmpleado", Model.IdEmpleado)
                    @Html.HiddenFor(model => model.IdEmpleado)
                </div>

                <div class="row-fluid">
                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.Legajo, "Legajo")
                        @Html.TextBoxFor(model => model.Legajo, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.Legajo)
                    </div>

                    <div class="span4 lightblue">
                        @Html.LabelFor(model => model.Nombre, "Nombre")
                        @Html.TextBoxFor(model => model.Nombre, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.Nombre)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.UsuarioNT, "Usuario de red")
                        @Html.TextBoxFor(model => model.UsuarioNT, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.UsuarioNT)
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.Password, "Password")
                        @Html.TextBoxFor(model => model.Password, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.Password)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.Iniciales, "Iniciales")
                        @Html.TextBoxFor(model => model.Iniciales, new { @class = "span4" })
                        @Html.ValidationMessageFor(model => model.Iniciales)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.Interno, "Interno")
                        @Html.TextBoxFor(model => model.Interno, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.Interno)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.FechaNacimiento, "Fecha de nacimiento")
                        @Html.TextBoxFor(model => model.FechaNacimiento, new Dictionary<string, object> { { "class", "span12" }, { "placeholder", "dd/mm/yyyy" } })
                        @Html.ValidationMessageFor(model => model.FechaNacimiento)
                        <script type="text/jscript">
                            $("#FechaNacimiento").datepicker({
                                changeMonth: true,
                                changeYear: true
                                //numberOfMonths: 2,
                            });
                        </script>
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.IdSector, "Sector")
                        @Html.DropDownList("IdSector", null, "", new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.IdSector)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.IdCargo, "Cargo")
                        @Html.DropDownList("IdCargo", null, "", new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.IdCargo)
                    </div>

                    <div class="span4 lightblue">
                        @Html.LabelFor(model => model.Email, "Email")
                        @Html.TextBoxFor(model => model.Email, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.CuentaBancaria, "Numero de cuenta bancaria")
                        @Html.TextBoxFor(model => model.CuentaBancaria, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.CuentaBancaria)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.InformacionAuxiliar, "Informacion auxiliar")
                        @Html.TextBoxFor(model => model.InformacionAuxiliar, new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.InformacionAuxiliar)
                    </div>

                    <div class="span4 lightblue">
                        @Html.LabelFor(model => model.IdCuentaFondoFijo, "Cuenta de fondo fijo asignada")
                        @Html.DropDownList("IdCuentaFondoFijo", null, "", new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.IdCuentaFondoFijo)
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="span4 lightblue">
                        @Html.LabelFor(model => model.IdObraAsignada, "Obra asignada")
                        @Html.DropDownList("IdObraAsignada", null, "", new { @class = "span12" })
                        @Html.ValidationMessageFor(model => model.IdObraAsignada)
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.Administrador, "Administrador")
                        @Html.RadioButtonFor(model => model.Administrador, "SI") SI
                        @Html.RadioButtonFor(model => model.Administrador, "NO") NO
                        @Html.ValidationMessageFor(model => model.Administrador)
                    </div>

                    <div class="span2 lightblue">
                        @Html.LabelFor(model => model.Activo, "Activo?")
                        @Html.RadioButtonFor(model => model.Activo, "SI") SI
                        @Html.RadioButtonFor(model => model.Activo, "NO") NO
                        @Html.ValidationMessageFor(model => model.Activo)
                    </div>

                    <div class="span4 lightblue">
                        @Html.LabelFor(model => model.TipoUsuario, "Tipo de usuario")
                        @Html.RadioButtonFor(model => model.TipoUsuario, 1) Propio
                        @Html.RadioButtonFor(model => model.TipoUsuario, 2) Obras propias
                        @Html.RadioButtonFor(model => model.TipoUsuario, 3) Obras ext.
                        @Html.RadioButtonFor(model => model.TipoUsuario, 4) Tercerizado
                        @Html.ValidationMessageFor(model => model.TipoUsuario)
                    </div>
                </div>

                <br />

                <div class="row-fluid">
                    <div class="span3 lightblue">
                        <table id="ListaIngresoEgreso" class="scroll" cellpadding="0" cellspacing="0"></table>
                        <div id="ListaPager1" class="scroll" style="text-align: center; height: 30px"></div>
                    </div>
                    <div class="span3 lightblue">
                        <table id="ListaSectores" class="scroll" cellpadding="0" cellspacing="0"></table>
                        <div id="ListaPager2" class="scroll" style="text-align: center; height: 30px"></div>
                    </div>
                    <div class="span3 lightblue">
                        <table id="ListaJornadas" class="scroll" cellpadding="0" cellspacing="0"></table>
                        <div id="ListaPager3" class="scroll" style="text-align: center; height: 30px"></div>
                    </div>
                </div>

                <br />

                <div class="row-fluid">
                    <div class="span3 lightblue">
                        <table id="ListaCuentasBancarias" class="scroll" cellpadding="0" cellspacing="0"></table>
                        <div id="ListaPager4" class="scroll" style="text-align: center; height: 30px"></div>
                    </div>
                    <div class="span3 lightblue">
                        <table id="ListaUbicaciones" class="scroll" cellpadding="0" cellspacing="0"></table>
                        <div id="ListaPager5" class="scroll" style="text-align: center; height: 30px"></div>
                    </div>
                </div>

                <br />

                <p>
                    <input type="button" id="grabar2" value="Aceptar" class="btn  btn-large btn-primary " usesubmitbehavior="false" />
                </p>
                <div>
                    @Html.ActionLink("Volver al listado", "Index")
                </div>
            </div>
        </div>
    </fieldset>

    <script type="text/javascript">
        $(document).ready(function () {
            var lastSelectedId;
            var inEdit;

            $('.ui-jqgrid .ui-jqgrid-htable th div').css('white-space', 'normal');

            $('#ListaIngresoEgreso').jqGrid({
                url: ROOT + 'Empleado/DetEmpleados/',
                postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
                datatype: 'json',
                mtype: 'POST',
                shrinkToFit: true,
                colNames: ['IdDetalleEmpleado', 'IdEmpleado', 'Fecha ingreso', 'Fecha egreso'],
                colModel: [
                            //{ name: 'act', index: 'act', align: 'center', width: 50, sortable: false, editable: false, search: false },
                            { name: 'IdDetalleEmpleado', index: 'IdDetalleEmpleado', align: 'left', width: 100, editable: false, hidden: true, label: 'TB' },
                            { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true, label: 'TB' },
                            {
                                name: 'FechaIngreso', index: 'FechaIngreso', width: 100, align: 'center', sorttype: 'date', editable: true,
                                editoptions: { size: 10, maxlengh: 10, dataInit: initDateEdit }, editrules: { required: false },
                                formatoptions: { newformat: 'dd/mm/yy' }, datefmt: 'dd/mm/yy', search: false, label: 'TB'
                            },
                            {
                                name: 'FechaEgreso', index: 'FechaEgreso', width: 100, align: 'center', sorttype: 'date', editable: true,
                                editoptions: { size: 10, maxlengh: 10, dataInit: initDateEdit }, editrules: { required: false }, 
                                formatoptions: { newformat: 'dd/mm/yy' }, datefmt: 'dd/mm/yy', search: false, label: 'TB'
                            }
                ],
                onSelectRow: function (id) {
                    if (id && id !== lastSelectedId) {
                        if (typeof lastSelectedId !== "undefined") {
                            grid.jqGrid('restoreRow', lastSelectedId);
                        }
                        lastSelectedId = id;
                    }
                },
                pager: $('#ListaPager1'),
                rowNum: 15,
                rowList: [10, 20, 50, 100],
                sortname: 'FechaIngreso',
                sortorder: 'asc',
                viewrecords: true,
                width: '300',
                //height: '100%',
                altRows: false,
                footerrow: true,
                userDataOnFooter: true,
                caption: '<b>INGRESOS - EGRESOS</b>',
                // http://stackoverflow.com/questions/14662632/jqgrid-celledit-in-json-data-shows-url-not-set-alert
                cellEdit: true,
                cellsubmit: 'clientArray',
                editurl: ROOT + 'Empleado/EditGridData/'
            });
            jQuery("#ListaIngresoEgreso").jqGrid('navGrid', '#ListaPager1', { refresh: true, add: true, edit: true, del: true }, {}, {}, {}, { sopt: ["cn"], width: 700, closeOnEscape: true, closeAfterSearch: true });
            jQuery("#ListaIngresoEgreso").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });

            $('#ListaSectores').jqGrid({
                url: ROOT + 'Empleado/DetEmpleadosSectores/',
                postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
                datatype: 'json',
                mtype: 'POST',
                shrinkToFit: true,
                colNames: ['IdDetalleEmpleadoSector', 'IdEmpleado', 'Fecha de cambio', 'Sector'],
                colModel: [
                            { name: 'IdDetalleEmpleadoSector', index: 'IdDetalleEmpleadoSector', align: 'left', width: 100, editable: false, hidden: true },
                            { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                            { name: 'FechaCambio', index: 'FechaCambio', width: 100, align: 'center', sorttype: 'date', editable: true, formatoptions: { newformat: 'dd/mm/yy' }, datefmt: 'dd/mm/yy', search: false, editrules: { required: false } },
                            { name: 'Sector', index: 'Sector', align: 'left', width: 100, editable: true, search: true, searchoptions: { sopt: ['cn'] }, editrules: { required: false } }
                ],
                onSelectRow: function (id) {
                    if (id && id !== lastSelectedId) {
                        if (typeof lastSelectedId !== "undefined") {
                            grid.jqGrid('restoreRow', lastSelectedId);
                        }
                        lastSelectedId = id;
                    }
                },
                pager: $('#ListaPager2'),
                rowNum: 15,
                rowList: [10, 20, 50, 100],
                sortname: 'FechaCambio',
                sortorder: 'asc',
                viewrecords: true,
                width: '300',
                //height: '100%',
                altRows: false,
                footerrow: true,
                userDataOnFooter: true,
                caption: '<b>CAMBIOS DE SECTORES</b>'
            });
            jQuery("#ListaSectores").jqGrid('navGrid', '#ListaPager2', { refresh: true, add: false, edit: false, del: false }, {}, {}, {}, { sopt: ["cn"], width: 700, closeOnEscape: true, closeAfterSearch: true });
            jQuery("#ListaSectores").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });

            $('#ListaJornadas').jqGrid({
                url: ROOT + 'Empleado/DetEmpleadosJornadas/',
                postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
                datatype: 'json',
                mtype: 'POST',
                shrinkToFit: true,
                colNames: ['IdDetalleEmpleadoJornada', 'IdEmpleado', 'Fecha de cambio', 'Hs.p/jornada'],
                colModel: [
                            { name: 'IdDetalleEmpleadoJornada', index: 'IdDetalleEmpleadoJornada', align: 'left', width: 100, editable: false, hidden: true },
                            { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                            { name: 'FechaCambio', index: 'FechaCambio', width: 100, align: 'center', sorttype: 'date', editable: false, formatoptions: { newformat: 'dd/mm/yy' }, datefmt: 'dd/mm/yy', search: false },
                            {
                              name: 'HorasJornada', index: 'HorasJornada', label: 'TB', align: 'right', width: 80, editable: true, hidden: false, edittype: 'currency',
                                editoptions: {
                                    maxlength: 20, defaultValue: '0.00',
                                    dataEvents: [{ type: 'change', fn: function (e) { CalcularItem(); } },
                                                 {
                                                     type: 'keypress',
                                                     fn: function (e) {
                                                         if (e.keyCode >= 48 && e.keyCode <= 57) {
                                                             return true;
                                                         } else {
                                                             alert("nada de letras");
                                                             return false;
                                                         }
                                                     }
                                                 }
                                    ]
                                },
                                editrules: { required: false },
                                defaultValue: 0
                            }
                ],
                onSelectRow: function (id) {
                    if (id && id !== lastSelectedId) {
                        if (typeof lastSelectedId !== "undefined") {
                            grid.jqGrid('restoreRow', lastSelectedId);
                        }
                        lastSelectedId = id;
                    }
                },
                pager: $('#ListaPager3'),
                rowNum: 15,
                rowList: [10, 20, 50, 100],
                sortname: 'FechaCambio',
                sortorder: 'asc',
                viewrecords: true,
                width: '300',
                //height: '100%',
                altRows: false,
                footerrow: true,
                userDataOnFooter: true,
                caption: '<b>JORNADAS</b>'
            });
            jQuery("#ListaJornadas").jqGrid('navGrid', '#ListaPager3', { refresh: true, add: true, edit: true, del: true }, {}, {}, {}, { sopt: ["cn"], width: 700, closeOnEscape: true, closeAfterSearch: true });
            jQuery("#ListaJornadas").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });

            $('#ListaCuentasBancarias').jqGrid({
                url: ROOT + 'Empleado/DetEmpleadosCuentasBancarias/',
                postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
                datatype: 'json',
                mtype: 'POST',
                shrinkToFit: true,
                colNames: ['IdDetalleEmpleadoCuentaBancaria', 'IdEmpleado', 'Banco', 'Cuenta bancaria', 'IdCuentaBancaria'],
                colModel: [
                            { name: 'IdDetalleEmpleadoCuentaBancaria', index: 'IdDetalleEmpleadoCuentaBancaria', align: 'left', width: 100, editable: false, hidden: true, label: 'TB' },
                            { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true, label: 'TB' },
                            { name: 'Banco', index: 'Banco', align: 'left', width: 100, editable: false, search: true, searchoptions: { sopt: ['cn'] } },
                            {
                                name: 'CuentaBancaria', formoptions: { rowpos: 8, colpos: 2, label: "CuentaBancaria" }, index: 'CuentaBancaria', align: 'left', width: 100,
                                hidden: false, editable: true, edittype: 'text',
                                editoptions: {
                                    rows: '1', cols: '1',
                                    dataInit: function (elem) {
                                        var NoResultsLabel = "No se encontraron resultados"; // http://stackoverflow.com/questions/8663189/jquery-autocomplete-no-result-message
                                        $(elem).autocomplete({
                                            source: ROOT + 'Banco/GetCuentasBancariasAutocomplete',
                                            minLength: 0,
                                            select: function (event, ui) {
                                                // http://www.trirand.com/blog/?page_id=393/help/while-the-select-editoption-posts-the-value-or-id-of-the-selected-list-item-autocomplete-posts-the-label-i-need-id-posted
                                                if (ui.item.label === NoResultsLabel) {
                                                    event.preventDefault();
                                                    return;
                                                }
                                                event.preventDefault();
                                                $(elem).val(ui.item.label);
                                                var rowid = $('#ListaCuentasBancarias').getGridParam('selrow');
                                                $('#ListaCuentasBancarias').jqGrid('setCell', rowid, 'IdCuentaBancaria', ui.item.id);
                                            },
                                            focus: function (event, ui) {
                                                if (ui.item.label === NoResultsLabel) {
                                                    event.preventDefault();
                                                }
                                            }
                                        })
                                        .data("ui-autocomplete")._renderItem = function (ul, item) {
                                            return $("<li></li>")
                                                .data("ui-autocomplete-item", item)
                                                .append("<a><span style='display:inline-block;width:500px;font-size:12px'><b>" + item.title + "</b></span></a>")
                                                //.append("<a>" + item.value + "<br>" + item.title + "</a>")
                                                .appendTo(ul);
                                        };
                                    },
                                    dataEvents: [{
                                        type: 'change',
                                        fn: function (e) {
                                            //alert(this.value);
                                            if (this.value == "No se encontraron resultados") {
                                                $("#Descripcion").val("");
                                                return;
                                            }

                                            $.post(ROOT + 'Banco/GetCuentasBancariasAutocomplete',  // ?term=' + val
                                                { term: this.value },
                                                function (data) {
                                                    if (data.length == 1 || data.length > 1) { // qué pasa si encuentra más de uno?????
                                                        var ui = data[0];

                                                        if (ui.codigo == "") {
                                                            alert("No existe la cuenta"); // se está bancando que no sea identica la descripcion
                                                            $("#Descripcion").val("");
                                                            return;
                                                        }
                                                        //alert('hay ' + data.length);
                                                        // alert(ui.codigo);
                                                        $("#IdCuentaBancaria").val(ui.id);
                                                    }
                                                    else {
                                                        alert("No existe la cuenta bancaria"); // se está bancando que no sea identica la descripcion
                                                    }
                                                }
                                            );
                                        }
                                    }]
                                },
                                editrules: { required: false }
                            },
                            { name: 'IdCuentaBancaria', index: 'IdCuentaBancaria', align: 'left', width: 100, editable: false, hidden: true, label: 'TB' }
                ],
                onSelectRow: function (id) {
                    if (id && id !== lastSelectedId) {
                        if (typeof lastSelectedId !== "undefined") {
                            grid.jqGrid('restoreRow', lastSelectedId);
                        }
                        lastSelectedId = id;
                    }
                },
                pager: $('#ListaPager4'),
                rowNum: 15,
                rowList: [10, 20, 50, 100],
                sortname: 'CuentaBancaria',
                sortorder: 'asc',
                viewrecords: true,
                width: '300',
                //height: '100%',
                altRows: false,
                footerrow: true,
                userDataOnFooter: true,
                caption: '<b>CUENTAS BANCARIAS ASIGNADAS</b>',
                // http://stackoverflow.com/questions/14662632/jqgrid-celledit-in-json-data-shows-url-not-set-alert
                cellEdit: true,
                cellsubmit: 'clientArray',
                editurl: ROOT + 'Empleado/EditGridData/'
            });
            jQuery("#ListaCuentasBancarias").jqGrid('navGrid', '#ListaPager4', { refresh: true, add: false, edit: false, del: false }, {}, {}, {}, { sopt: ["cn"], width: 700, closeOnEscape: true, closeAfterSearch: true });
            jQuery("#ListaCuentasBancarias").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });

            $('#ListaUbicaciones').jqGrid({
                url: ROOT + 'Empleado/DetEmpleadosUbicaciones/',
                postData: { 'IdEmpleado': function () { return $("#IdEmpleado").val(); } },
                datatype: 'json',
                mtype: 'POST',
                shrinkToFit: true,
                colNames: ['IdDetalleEmpleadoCuentaBancaria', 'IdEmpleado', 'Cuenta bancaria'],
                colModel: [
                            { name: 'IdDetalleEmpleadoCuentaBancaria', index: 'IdDetalleEmpleadoCuentaBancaria', align: 'left', width: 100, editable: false, hidden: true },
                            { name: 'IdEmpleado', index: 'IdEmpleado', align: 'left', width: 100, editable: false, hidden: true },
                            { name: 'Ubicacion', index: 'Ubicacion', align: 'left', width: 100, editable: false, search: true, searchoptions: { sopt: ['cn'] } }
                ],
                onSelectRow: function (id) {
                    if (id && id !== lastSelectedId) {
                        if (typeof lastSelectedId !== "undefined") {
                            grid.jqGrid('restoreRow', lastSelectedId);
                        }
                        lastSelectedId = id;
                    }
                },
                pager: $('#ListaPager5'),
                rowNum: 15,
                rowList: [10, 20, 50, 100],
                sortname: 'CuentaBancaria',
                sortorder: 'asc',
                viewrecords: true,
                width: '300',
                //height: '100%',
                altRows: false,
                footerrow: true,
                userDataOnFooter: true,
                caption: '<b>UBICACIONES ASIGNADAS</b>'
            });
            jQuery("#ListaUbicaciones").jqGrid('navGrid', '#ListaPager5', { refresh: true, add: false, edit: false, del: false }, {}, {}, {}, { sopt: ["cn"], width: 700, closeOnEscape: true, closeAfterSearch: true });
            jQuery("#ListaUbicaciones").jqGrid('gridResize', { minWidth: 350, maxWidth: 1500, minHeight: 80, maxHeight: 500 });
        });

        $('#grabar2').click(function () {
            //jQuery('#ListaCuentasBancarias').jqGrid('saveCell', lastRowIndex, lastColIndex);

            var cabecera = SerializaForm();

            $('html, body').css('cursor', 'wait');
            $.ajax({
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                url: ROOT + 'Empleado/BatchUpdate',
                dataType: 'json',
                data: JSON.stringify(cabecera), // $.toJSON(cabecera),
                success: function (result) {
                    if (result) {
                        $('html, body').css('cursor', 'auto');
                        if (true) {
                            // window.location = (ROOT + "ComprobanteProveedor/EditFF/" + result.IdComprobanteProveedor);
                            window.location = (ROOT + "Empleado/Edit/-1");
                        } else {
                            var dt = new Date();
                            var currentTime = dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds();

                            $("#textoMensajeAlerta").html("Grabado " + currentTime);
                            $("#mensajeAlerta").show();
                            $('html, body').css('cursor', 'auto');
                            $('#grabar2').attr("disabled", false).val("Aceptar y nuevo");
                        }

                    } else {
                        alert('No se pudo grabar el comprobante.');
                        $('.loading').html('');

                        $('html, body').css('cursor', 'auto');
                        $('#grabar2').attr("disabled", false).val("Aceptar y nuevo");
                    }
                },

                beforeSend: function () {
                    //$('.loading').html('some predefined loading img html');
                    $("#loading").show();
                    $('#grabar2').attr("disabled", true).val("Espere...");

                },
                complete: function () {
                    $("#loading").hide();
                }
                    ,
                error: function (xhr, textStatus, exceptionThrown) {
                    try {
                        var errorData = $.parseJSON(xhr.responseText);
                        var errorMessages = [];
                        //this ugly loop is because List<> is serialized to an object instead of an array
                        for (var key in errorData) {
                            errorMessages.push(errorData[key]);
                        }


                        $('html, body').css('cursor', 'auto');
                        $('#grabar2').attr("disabled", false).val("Aceptar y nuevo");
                        //alert(errorMessages.join("<br />"));

                        // $("#textoMensajeAlerta").html(errorMessages.join("<br />"));
                        //$('#result').html(errorMessages.join("<br />"));
                        //$("#textoMensajeAlerta").html(xhr.responseText);
                        $("#textoMensajeAlerta").html(errorData.Errors.join("<br />"));
                        $("#mensajeAlerta").show();
                        pageLayout.show('east');

                        alert(errorData.Errors.join("\n").replace(/<br\/>/g, '\n'));
                    } catch (e) {
                        // http://stackoverflow.com/questions/15532667/asp-netazure-400-bad-request-doesnt-return-json-data
                        // si tira error de Bad Request en el II7, agregar el asombroso   <httpErrors existingResponse="PassThrough"/>

                        $('html, body').css('cursor', 'auto');
                        $('#grabar2').attr("disabled", false).val("Aceptar y nuevo");
                        //alert(xhr.responseText);
                        $("#textoMensajeAlerta").html(xhr.responseText);
                        $("#mensajeAlerta").show();
                    }
                }

            });
        });

        function SerializaForm() {
            var cm, data1, data2, valor;
            var cabecera = $("#formid").serializeObject(); 
            cabecera.DetalleCuentasBancarias = [];
            var colModel = jQuery("#ListaCuentasBancarias").jqGrid('getGridParam', 'colModel');

            var dataIds = $('#ListaCuentasBancarias').jqGrid('getDataIDs');
            for (var i = 0; i < dataIds.length; i++) {
                try {
                    try {
                        $('#ListaCuentasBancarias').jqGrid('saveRow', dataIds[i], false, 'clientArray');
                    } catch (e) {
                        $('#ListaCuentasBancarias').jqGrid('restoreRow', dataIds[i]);
                        continue;
                    }

                    var data = $('#ListaCuentasBancarias').jqGrid('getRowData', dataIds[i]);
                    var iddeta = data['IdDetalleEmpleadoCuentaBancaria'];
                    if (!iddeta) continue;

                    data1 = '{"IdEmpleado":"' + $("#IdEmpleado").val() + '",'
                    for (var j = 0; j < colModel.length; j++) {
                        cm = colModel[j]
                        if (cm.label === 'TB') {
                            valor = data[cm.name];
                            data1 = data1 + '"' + cm.name + '":"' + valor + '",';
                        }
                    }
                    data1 = data1.substring(0, data1.length - 1) + '}';
                    data1 = data1.replace(/(\r\n|\n|\r)/gm, "");
                    data2 = JSON.parse(data1);
                    cabecera.DetalleCuentasBancarias.push(data2);
                }
                catch (ex) {
                    $('#ListaCuentasBancarias').jqGrid('restoreRow', dataIds[i]);
                    alert("SerializaForm(): No se pudo serializar el comprobante. Quizas convenga grabar todos los renglones de la jqgrid (saverow) antes de hacer el post ajax. En cuanto sacas los renglones del modo edicion, no tira más este error  " + ex);
                    return;
                }
            }
            return cabecera;
        }


    </script>
}
