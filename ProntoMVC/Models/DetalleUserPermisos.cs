//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ProntoMVC.Models
{
    [DataContract(IsReference = true)]
    public partial class DetalleUserPermisos: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int IdDetalleUserPermisos
        {
            get { return _idDetalleUserPermisos; }
            set
            {
                if (_idDetalleUserPermisos != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdDetalleUserPermisos' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idDetalleUserPermisos = value;
                    OnPropertyChanged("IdDetalleUserPermisos");
                }
            }
        }
        private int _idDetalleUserPermisos;
    
        [DataMember]
        public Nullable<System.Guid> UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private Nullable<System.Guid> _userId;
    
        [DataMember]
        public string Modulo
        {
            get { return _modulo; }
            set
            {
                if (_modulo != value)
                {
                    _modulo = value;
                    OnPropertyChanged("Modulo");
                }
            }
        }
        private string _modulo;
    
        [DataMember]
        public Nullable<bool> PuedeLeer
        {
            get { return _puedeLeer; }
            set
            {
                if (_puedeLeer != value)
                {
                    _puedeLeer = value;
                    OnPropertyChanged("PuedeLeer");
                }
            }
        }
        private Nullable<bool> _puedeLeer;
    
        [DataMember]
        public Nullable<bool> PuedeModificar
        {
            get { return _puedeModificar; }
            set
            {
                if (_puedeModificar != value)
                {
                    _puedeModificar = value;
                    OnPropertyChanged("PuedeModificar");
                }
            }
        }
        private Nullable<bool> _puedeModificar;
    
        [DataMember]
        public Nullable<bool> PuedeEliminar
        {
            get { return _puedeEliminar; }
            set
            {
                if (_puedeEliminar != value)
                {
                    _puedeEliminar = value;
                    OnPropertyChanged("PuedeEliminar");
                }
            }
        }
        private Nullable<bool> _puedeEliminar;
    
        [DataMember]
        public bool Instalado
        {
            get { return _instalado; }
            set
            {
                if (_instalado != value)
                {
                    _instalado = value;
                    OnPropertyChanged("Instalado");
                }
            }
        }
        private bool _instalado;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
