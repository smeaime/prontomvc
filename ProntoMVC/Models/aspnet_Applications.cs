//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ProntoMVC.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(aspnet_Membership))]
    [KnownType(typeof(aspnet_Paths))]
    [KnownType(typeof(aspnet_Roles))]
    [KnownType(typeof(aspnet_Users))]
    public partial class aspnet_Applications: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string ApplicationName
        {
            get { return _applicationName; }
            set
            {
                if (_applicationName != value)
                {
                    _applicationName = value;
                    OnPropertyChanged("ApplicationName");
                }
            }
        }
        private string _applicationName;
    
        [DataMember]
        public string LoweredApplicationName
        {
            get { return _loweredApplicationName; }
            set
            {
                if (_loweredApplicationName != value)
                {
                    _loweredApplicationName = value;
                    OnPropertyChanged("LoweredApplicationName");
                }
            }
        }
        private string _loweredApplicationName;
    
        [DataMember]
        public System.Guid ApplicationId
        {
            get { return _applicationId; }
            set
            {
                if (_applicationId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ApplicationId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _applicationId = value;
                    OnPropertyChanged("ApplicationId");
                }
            }
        }
        private System.Guid _applicationId;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<aspnet_Membership> aspnet_Membership
        {
            get
            {
                if (_aspnet_Membership == null)
                {
                    _aspnet_Membership = new TrackableCollection<aspnet_Membership>();
                    _aspnet_Membership.CollectionChanged += Fixupaspnet_Membership;
                }
                return _aspnet_Membership;
            }
            set
            {
                if (!ReferenceEquals(_aspnet_Membership, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_aspnet_Membership != null)
                    {
                        _aspnet_Membership.CollectionChanged -= Fixupaspnet_Membership;
                    }
                    _aspnet_Membership = value;
                    if (_aspnet_Membership != null)
                    {
                        _aspnet_Membership.CollectionChanged += Fixupaspnet_Membership;
                    }
                    OnNavigationPropertyChanged("aspnet_Membership");
                }
            }
        }
        private TrackableCollection<aspnet_Membership> _aspnet_Membership;
    
        [DataMember]
        public TrackableCollection<aspnet_Paths> aspnet_Paths
        {
            get
            {
                if (_aspnet_Paths == null)
                {
                    _aspnet_Paths = new TrackableCollection<aspnet_Paths>();
                    _aspnet_Paths.CollectionChanged += Fixupaspnet_Paths;
                }
                return _aspnet_Paths;
            }
            set
            {
                if (!ReferenceEquals(_aspnet_Paths, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_aspnet_Paths != null)
                    {
                        _aspnet_Paths.CollectionChanged -= Fixupaspnet_Paths;
                    }
                    _aspnet_Paths = value;
                    if (_aspnet_Paths != null)
                    {
                        _aspnet_Paths.CollectionChanged += Fixupaspnet_Paths;
                    }
                    OnNavigationPropertyChanged("aspnet_Paths");
                }
            }
        }
        private TrackableCollection<aspnet_Paths> _aspnet_Paths;
    
        [DataMember]
        public TrackableCollection<aspnet_Roles> aspnet_Roles
        {
            get
            {
                if (_aspnet_Roles == null)
                {
                    _aspnet_Roles = new TrackableCollection<aspnet_Roles>();
                    _aspnet_Roles.CollectionChanged += Fixupaspnet_Roles;
                }
                return _aspnet_Roles;
            }
            set
            {
                if (!ReferenceEquals(_aspnet_Roles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_aspnet_Roles != null)
                    {
                        _aspnet_Roles.CollectionChanged -= Fixupaspnet_Roles;
                    }
                    _aspnet_Roles = value;
                    if (_aspnet_Roles != null)
                    {
                        _aspnet_Roles.CollectionChanged += Fixupaspnet_Roles;
                    }
                    OnNavigationPropertyChanged("aspnet_Roles");
                }
            }
        }
        private TrackableCollection<aspnet_Roles> _aspnet_Roles;
    
        [DataMember]
        public TrackableCollection<aspnet_Users> aspnet_Users
        {
            get
            {
                if (_aspnet_Users == null)
                {
                    _aspnet_Users = new TrackableCollection<aspnet_Users>();
                    _aspnet_Users.CollectionChanged += Fixupaspnet_Users;
                }
                return _aspnet_Users;
            }
            set
            {
                if (!ReferenceEquals(_aspnet_Users, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_aspnet_Users != null)
                    {
                        _aspnet_Users.CollectionChanged -= Fixupaspnet_Users;
                    }
                    _aspnet_Users = value;
                    if (_aspnet_Users != null)
                    {
                        _aspnet_Users.CollectionChanged += Fixupaspnet_Users;
                    }
                    OnNavigationPropertyChanged("aspnet_Users");
                }
            }
        }
        private TrackableCollection<aspnet_Users> _aspnet_Users;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            aspnet_Membership.Clear();
            aspnet_Paths.Clear();
            aspnet_Roles.Clear();
            aspnet_Users.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void Fixupaspnet_Membership(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (aspnet_Membership item in e.NewItems)
                {
                    item.aspnet_Applications = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("aspnet_Membership", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (aspnet_Membership item in e.OldItems)
                {
                    if (ReferenceEquals(item.aspnet_Applications, this))
                    {
                        item.aspnet_Applications = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("aspnet_Membership", item);
                    }
                }
            }
        }
    
        private void Fixupaspnet_Paths(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (aspnet_Paths item in e.NewItems)
                {
                    item.aspnet_Applications = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("aspnet_Paths", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (aspnet_Paths item in e.OldItems)
                {
                    if (ReferenceEquals(item.aspnet_Applications, this))
                    {
                        item.aspnet_Applications = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("aspnet_Paths", item);
                    }
                }
            }
        }
    
        private void Fixupaspnet_Roles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (aspnet_Roles item in e.NewItems)
                {
                    item.aspnet_Applications = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("aspnet_Roles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (aspnet_Roles item in e.OldItems)
                {
                    if (ReferenceEquals(item.aspnet_Applications, this))
                    {
                        item.aspnet_Applications = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("aspnet_Roles", item);
                    }
                }
            }
        }
    
        private void Fixupaspnet_Users(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (aspnet_Users item in e.NewItems)
                {
                    item.aspnet_Applications = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("aspnet_Users", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (aspnet_Users item in e.OldItems)
                {
                    if (ReferenceEquals(item.aspnet_Applications, this))
                    {
                        item.aspnet_Applications = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("aspnet_Users", item);
                    }
                }
            }
        }

        #endregion
    }
}
