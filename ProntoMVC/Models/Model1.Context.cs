//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Objects;

namespace ProntoMVC.Models
{
    public partial class DemoProntoEntities : DbContext
    {
        public DemoProntoEntities()
            : this(false) { }
    
        public DemoProntoEntities(bool proxyCreationEnabled)	    
            : base("name=DemoProntoEntities")
        {
            this.Configuration.ProxyCreationEnabled = proxyCreationEnabled;
        }
    
        public DemoProntoEntities(string connectionString)
          : this(connectionString, false) { }
    
        public DemoProntoEntities(string connectionString, bool proxyCreationEnabled)
            : base(connectionString)
        {
            this.Configuration.ProxyCreationEnabled = proxyCreationEnabled;
        }	
    
        public ObjectContext ObjectContext
        {
          get { return ((IObjectContextAdapter)this).ObjectContext; }
        }
    
    	protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    	
        public DbSet<Articulo> Articulos { get; set; }
        public DbSet<ControlCalidad> ControlesCalidads { get; set; }
        public DbSet<DetalleRequerimiento> DetalleRequerimientos { get; set; }
        public DbSet<Empleado> Empleados { get; set; }
        public DbSet<Obra> Obras { get; set; }
        public DbSet<Requerimiento> Requerimientos { get; set; }
        public DbSet<Sector> Sectores { get; set; }
        public DbSet<Unidad> Unidades { get; set; }
        public DbSet<Parametros> Parametros { get; set; }
        public DbSet<Parametros2> Parametros2 { get; set; }
        public DbSet<Vendedor> Vendedores { get; set; }
        public DbSet<Cliente> Clientes { get; set; }
        public DbSet<PuntosVenta> PuntosVentas { get; set; }
        public DbSet<DescripcionIva> DescripcionIvas { get; set; }
        public DbSet<Condiciones_Compra> Condiciones_Compras { get; set; }
        public DbSet<Ganancia> Ganancias { get; set; }
        public DbSet<IGCondicion> IGCondiciones { get; set; }
        public DbSet<ListasPrecio> ListasPrecios { get; set; }
        public DbSet<ListasPreciosDetalle> ListasPreciosDetalles { get; set; }
        public DbSet<TiposRetencionGanancia> TiposRetencionGanancias { get; set; }
        public DbSet<Concepto> Conceptos { get; set; }
        public DbSet<Cuenta> Cuentas { get; set; }
        public DbSet<DetallePedido> DetallePedidos { get; set; }
        public DbSet<DetallePresupuesto> DetallePresupuestos { get; set; }
        public DbSet<Pedido> Pedidos { get; set; }
        public DbSet<Presupuesto> Presupuestos { get; set; }
        public DbSet<IBCondicion> IBCondiciones { get; set; }
        public DbSet<Localidad> Localidades { get; set; }
        public DbSet<Moneda> Monedas { get; set; }
        public DbSet<Pais> Paises { get; set; }
        public DbSet<Provincia> Provincias { get; set; }
        public DbSet<TiposComprobante> TiposComprobantes { get; set; }
        public DbSet<DetalleFactura> DetalleFacturas { get; set; }
        public DbSet<Factura> Facturas { get; set; }
        public DbSet<DetalleProveedor> DetalleProveedores { get; set; }
        public DbSet<DetalleProveedoresIB> DetalleProveedoresIBs { get; set; }
        public DbSet<DetalleProveedoresRubro> DetalleProveedoresRubros { get; set; }
        public DbSet<PlazosEntrega> PlazosEntregas { get; set; }
        public DbSet<Proveedor> Proveedores { get; set; }
        public DbSet<Rubro> Rubros { get; set; }
        public DbSet<DetalleCliente> DetalleClientes { get; set; }
        public DbSet<DetalleClientesLugaresEntrega> DetalleClientesLugaresEntregas { get; set; }
        public DbSet<BancoChequera> BancoChequeras { get; set; }
        public DbSet<Banco> Bancos { get; set; }
        public DbSet<TarjetasCredito> TarjetasCreditoes { get; set; }
        public DbSet<Estados_Proveedore> Estados_Proveedores { get; set; }
        public DbSet<Cotizacione> Cotizaciones { get; set; }
        public DbSet<CuentasCorrientesAcreedor> CuentasCorrientesAcreedores { get; set; }
        public DbSet<CuentasCorrientesDeudor> CuentasCorrientesDeudores { get; set; }
        public DbSet<CuentasEjerciciosContable> CuentasEjerciciosContables { get; set; }
        public DbSet<CuentasGasto> CuentasGastos { get; set; }
        public DbSet<DetalleCuenta> DetalleCuentas { get; set; }
        public DbSet<Subdiario> Subdiarios { get; set; }
        public DbSet<DetalleOrdenesCompra> DetalleOrdenesCompras { get; set; }
        public DbSet<DetalleRemito> DetalleRemitos { get; set; }
        public DbSet<OrdenesCompra> OrdenesCompras { get; set; }
        public DbSet<Remito> Remitos { get; set; }
        public DbSet<DetalleFacturasClientesPRESTO> DetalleFacturasClientesPRESTOes { get; set; }
        public DbSet<DetalleFacturasOrdenesCompra> DetalleFacturasOrdenesCompras { get; set; }
        public DbSet<DetalleFacturasProvincia> DetalleFacturasProvincias { get; set; }
        public DbSet<DetalleFacturasRemito> DetalleFacturasRemitos { get; set; }
        public DbSet<DetalleArticulosActivosFijo> DetalleArticulosActivosFijos { get; set; }
        public DbSet<DetalleArticulosDocumento> DetalleArticulosDocumentos { get; set; }
        public DbSet<DetalleArticulosImagene> DetalleArticulosImagenes { get; set; }
        public DbSet<DetalleArticulosUnidade> DetalleArticulosUnidades { get; set; }
        public DbSet<DefinicionArticulo> DefinicionArticulos { get; set; }
        public DbSet<Deposito> Depositos { get; set; }
        public DbSet<Stock> Stocks { get; set; }
        public DbSet<Ubicacion> Ubicaciones { get; set; }
        public DbSet<EmpleadosAcceso> EmpleadosAccesos { get; set; }
        public DbSet<DetalleRecibo> DetalleRecibos { get; set; }
        public DbSet<DetalleRecibosCuenta> DetalleRecibosCuentas { get; set; }
        public DbSet<DetalleRecibosRubrosContable> DetalleRecibosRubrosContables { get; set; }
        public DbSet<DetalleRecibosValore> DetalleRecibosValores { get; set; }
        public DbSet<Recibo> Recibos { get; set; }
        public DbSet<RubrosContable> RubrosContables { get; set; }
        public DbSet<RubrosValore> RubrosValores { get; set; }
        public DbSet<Valore> Valores { get; set; }
        public DbSet<Subrubro> Subrubros { get; set; }
        public DbSet<Comparativa> Comparativas { get; set; }
        public DbSet<DetalleComparativa> DetalleComparativas { get; set; }
        public DbSet<Autorizacione> Autorizaciones { get; set; }
        public DbSet<AutorizacionesCompra> AutorizacionesCompras { get; set; }
        public DbSet<AutorizacionesPorComprobante1> AutorizacionesPorComprobante1 { get; set; }
        public DbSet<AutorizacionesPorComprobanteADesignar> AutorizacionesPorComprobanteADesignars { get; set; }
        public DbSet<DetalleAutorizacione> DetalleAutorizaciones { get; set; }
        public DbSet<DetalleAutorizacionesCompra> DetalleAutorizacionesCompras { get; set; }
        public DbSet<DetalleAutorizacionesFirmante> DetalleAutorizacionesFirmantes { get; set; }
        public DbSet<C_BorradoSubdiarios> C_BorradoSubdiarios { get; set; }
        public DbSet<ProntoIni> ProntoIni { get; set; }
        public DbSet<ProntoIniClaves> ProntoIniClaves { get; set; }
        public DbSet<C_TempAutorizaciones> C_TempAutorizaciones { get; set; }
        public DbSet<DetalleOrdenesPago> DetalleOrdenesPagoes { get; set; }
        public DbSet<DetalleOrdenesPagoCuenta> DetalleOrdenesPagoCuentas { get; set; }
        public DbSet<DetalleOrdenesPagoImpuesto> DetalleOrdenesPagoImpuestos { get; set; }
        public DbSet<DetalleOrdenesPagoRendicionesFF> DetalleOrdenesPagoRendicionesFFs { get; set; }
        public DbSet<DetalleOrdenesPagoRubrosContable> DetalleOrdenesPagoRubrosContables { get; set; }
        public DbSet<DetalleOrdenesPagoValore> DetalleOrdenesPagoValores { get; set; }
        public DbSet<OrdenPago> OrdenesPago { get; set; }
        public DbSet<ComprobanteProveedor> ComprobantesProveedor { get; set; }
        public DbSet<DetalleComprobantesProveedore> DetalleComprobantesProveedores { get; set; }
        public DbSet<DetalleComprobantesProveedoresPresupuestosObra> DetalleComprobantesProveedoresPresupuestosObras { get; set; }
        public DbSet<DetalleComprobantesProveedoresProvincia> DetalleComprobantesProveedoresProvincias { get; set; }
        public DbSet<Caja> Cajas { get; set; }
        public DbSet<DetalleEmpleado> DetalleEmpleados { get; set; }
        public DbSet<DetalleEmpleadosCuentasBancaria> DetalleEmpleadosCuentasBancarias { get; set; }
        public DbSet<DetalleEmpleadosJornada> DetalleEmpleadosJornadas { get; set; }
        public DbSet<DetalleEmpleadosSectore> DetalleEmpleadosSectores { get; set; }
        public DbSet<DetalleNotasCredito> DetalleNotasCreditoes { get; set; }
        public DbSet<DetalleNotasCreditoImputacione> DetalleNotasCreditoImputaciones { get; set; }
        public DbSet<DetalleNotasCreditoOrdenesCompra> DetalleNotasCreditoOrdenesCompras { get; set; }
        public DbSet<DetalleNotasCreditoProvincia> DetalleNotasCreditoProvincias { get; set; }
        public DbSet<DetalleNotasDebito> DetalleNotasDebitoes { get; set; }
        public DbSet<DetalleNotasDebitoProvincia> DetalleNotasDebitoProvincias { get; set; }
        public DbSet<Ejercicio> Ejercicios { get; set; }
        public DbSet<EjerciciosContable> EjerciciosContables { get; set; }
        public DbSet<EjerciciosPeriodo> EjerciciosPeriodos { get; set; }
        public DbSet<Empresa> Empresas { get; set; }
        public DbSet<Formulario> Formularios { get; set; }
        public DbSet<NotasCredito> NotasCreditoes { get; set; }
        public DbSet<NotasDebito> NotasDebitoes { get; set; }
        public DbSet<TiposValore> TiposValores { get; set; }
        public DbSet<TiposCuenta> TiposCuentas { get; set; }
        public DbSet<TiposCuentaGrupos> TiposCuentaGrupos { get; set; }
        public DbSet<Titulo> Titulos { get; set; }
    
        public virtual int Requerimientos_ActualizarEstado(Nullable<int> idRequerimiento, Nullable<int> idDetalleRequerimiento)
        {
            var idRequerimientoParameter = idRequerimiento.HasValue ?
                new ObjectParameter("IdRequerimiento", idRequerimiento) :
                new ObjectParameter("IdRequerimiento", typeof(int));
    
            var idDetalleRequerimientoParameter = idDetalleRequerimiento.HasValue ?
                new ObjectParameter("IdDetalleRequerimiento", idDetalleRequerimiento) :
                new ObjectParameter("IdDetalleRequerimiento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Requerimientos_ActualizarEstado", idRequerimientoParameter, idDetalleRequerimientoParameter);
        }
    
        public virtual ObjectResult<AutorizacionesPorComprobante> AutorizacionesPorComprobante_TX_AutorizacionesPorComprobante(Nullable<int> idFormulario, Nullable<int> idComprobante)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(AutorizacionesPorComprobante).Assembly);
    
            var idFormularioParameter = idFormulario.HasValue ?
                new ObjectParameter("IdFormulario", idFormulario) :
                new ObjectParameter("IdFormulario", typeof(int));
    
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AutorizacionesPorComprobante>("AutorizacionesPorComprobante_TX_AutorizacionesPorComprobante", idFormularioParameter, idComprobanteParameter);
        }
    
        public virtual int Cotizaciones_TX_PorFechaMoneda(Nullable<System.DateTime> fecha, Nullable<int> idMoneda)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idMonedaParameter = idMoneda.HasValue ?
                new ObjectParameter("IdMoneda", idMoneda) :
                new ObjectParameter("IdMoneda", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cotizaciones_TX_PorFechaMoneda", fechaParameter, idMonedaParameter);
        }
    
        public virtual int OrdenesCompra_TX_ItemsPendientesDeFacturar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrdenesCompra_TX_ItemsPendientesDeFacturar");
        }
    
        public virtual int Remitos_TX_ItemsPendientesDeFacturar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Remitos_TX_ItemsPendientesDeFacturar");
        }
    
        public virtual ObjectResult<Articulos_TX_DatosConCuenta_Result> Articulos_TX_DatosConCuenta(Nullable<int> idArticulo)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(Articulos_TX_DatosConCuenta_Result).Assembly);
    
            var idArticuloParameter = idArticulo.HasValue ?
                new ObjectParameter("IdArticulo", idArticulo) :
                new ObjectParameter("IdArticulo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Articulos_TX_DatosConCuenta_Result>("Articulos_TX_DatosConCuenta", idArticuloParameter);
        }
    
        public virtual int CtasCtesA_TXPorTrs(Nullable<int> idProveedor, Nullable<int> todo, Nullable<System.DateTime> fechaLimite, Nullable<System.DateTime> fechaDesde, Nullable<int> consolidar, string pendiente)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var todoParameter = todo.HasValue ?
                new ObjectParameter("Todo", todo) :
                new ObjectParameter("Todo", typeof(int));
    
            var fechaLimiteParameter = fechaLimite.HasValue ?
                new ObjectParameter("FechaLimite", fechaLimite) :
                new ObjectParameter("FechaLimite", typeof(System.DateTime));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var consolidarParameter = consolidar.HasValue ?
                new ObjectParameter("Consolidar", consolidar) :
                new ObjectParameter("Consolidar", typeof(int));
    
            var pendienteParameter = pendiente != null ?
                new ObjectParameter("Pendiente", pendiente) :
                new ObjectParameter("Pendiente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CtasCtesA_TXPorTrs", idProveedorParameter, todoParameter, fechaLimiteParameter, fechaDesdeParameter, consolidarParameter, pendienteParameter);
        }
    
        public virtual ObjectResult<OrdenesPago_TX_EnCaja_Result> OrdenesPago_TX_EnCaja(string estado)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(OrdenesPago_TX_EnCaja_Result).Assembly);
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrdenesPago_TX_EnCaja_Result>("OrdenesPago_TX_EnCaja", estadoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Autorizaciones_TX_CantidadAutorizaciones(Nullable<int> idFormulario, Nullable<decimal> importe, Nullable<int> idComprobante)
        {
            var idFormularioParameter = idFormulario.HasValue ?
                new ObjectParameter("IdFormulario", idFormulario) :
                new ObjectParameter("IdFormulario", typeof(int));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(decimal));
    
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Autorizaciones_TX_CantidadAutorizaciones", idFormularioParameter, importeParameter, idComprobanteParameter);
        }
    
        public virtual int AutorizacionesPorComprobante_A(Nullable<int> idFormulario, Nullable<int> idComprobante, Nullable<int> ordenAutorizacion, Nullable<int> idAutorizo, Nullable<System.DateTime> fechaAutorizacion, string visto, ObjectParameter idAutorizacionPorComprobante)
        {
            var idFormularioParameter = idFormulario.HasValue ?
                new ObjectParameter("IdFormulario", idFormulario) :
                new ObjectParameter("IdFormulario", typeof(int));
    
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var ordenAutorizacionParameter = ordenAutorizacion.HasValue ?
                new ObjectParameter("OrdenAutorizacion", ordenAutorizacion) :
                new ObjectParameter("OrdenAutorizacion", typeof(int));
    
            var idAutorizoParameter = idAutorizo.HasValue ?
                new ObjectParameter("IdAutorizo", idAutorizo) :
                new ObjectParameter("IdAutorizo", typeof(int));
    
            var fechaAutorizacionParameter = fechaAutorizacion.HasValue ?
                new ObjectParameter("FechaAutorizacion", fechaAutorizacion) :
                new ObjectParameter("FechaAutorizacion", typeof(System.DateTime));
    
            var vistoParameter = visto != null ?
                new ObjectParameter("Visto", visto) :
                new ObjectParameter("Visto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutorizacionesPorComprobante_A", idFormularioParameter, idComprobanteParameter, ordenAutorizacionParameter, idAutorizoParameter, fechaAutorizacionParameter, vistoParameter, idAutorizacionPorComprobante);
        }
    
        public virtual int wActualizacionesVariasPorComprobante(Nullable<int> idTipoCOmprobante, Nullable<int> idComprobante, string tipoMovimiento)
        {
            var idTipoCOmprobanteParameter = idTipoCOmprobante.HasValue ?
                new ObjectParameter("IdTipoCOmprobante", idTipoCOmprobante) :
                new ObjectParameter("IdTipoCOmprobante", typeof(int));
    
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var tipoMovimientoParameter = tipoMovimiento != null ?
                new ObjectParameter("TipoMovimiento", tipoMovimiento) :
                new ObjectParameter("TipoMovimiento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wActualizacionesVariasPorComprobante", idTipoCOmprobanteParameter, idComprobanteParameter, tipoMovimientoParameter);
        }
    }
}
